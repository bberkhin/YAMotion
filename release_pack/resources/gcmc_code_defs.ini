goto=vector goto(vector:endpoint );
vector goto( vectorlist:points )
Rapid move(G0) to position endpoint, or all position in vectorlist points. 
The endpoint/points position is an absolute position.
goto_r=vector goto_r( vector:endpoint )
vector goto_r( vectorlist:points )
Rapid move(G0) to position endpoint, or all position in vectorlist points.
The endpoint/points position is a relative position.
move=vector move(vector:endpoint [,scalar:rate])
Feed move(G1) to position endpoint, or all position in vectorlist points.
The endpoint/points position is an absolute position for move()
and a relative position for move_r()
move_r=vector move_r(vector:endpoint [,scalar:rate])
Feed move(G1) to position endpoint, or all position in vectorlist points.
The endpoint/points position is an absolute position for move()
and a relative position for move_r()
abs=scalar abs( scalar:val )
Return the absolute value of val. Units are preserved.
acos=float acos( scalar:val )
val scalar [no unit] A number from -1.0 to 1.0.
Return the arc-cosine of val in radians.
asin=float asin( scalar:val )
val scalar [no unit] A number from -1.0 to 1.0.
Return the arc-sine of val in radians.
atan=float atan( scalar:y, scalar:x )
Return the arc-tangent of y/x in radians.
atan_xy=float atan_xy( vector:v )
Return the arc-tangent of v.y/v.x in radians.
atan_xz=float atan_xz( vector:v )
Return the arc-tangent of v.z/v.x in radians.
atan_yz=float atan_yz( vector:v )
Return the arc-tangent of v.z/v.y in radians.
ceil=float ceil( scalar:val )
Return the smallest integral number not smaller than val. Units are preserved. Examples:
comment=undef comment( ... ) ... Any type of argument
Outputs all arguments as a G-code comment into the output.
The comment() function will prepend a '(' and append a ')' including newline automatically.
cos=float cos( scalar:angle )
Return the cosine of angle. The returned value has no units associated.
count=integer count( vector:arg )
integer count( vectorlist:arg )
integer count( string:arg )
Returns number of coordinates or the number of vectors
Returns the number of bytes if arg is s string.
delete=vector delete( vector:arg, scalar:idx )
vector delete( vector:arg, scalar:idx, scalar:cnt )
vectorlist delete( vectorlist:arg, scalar:idx )
vectorlist delete( vectorlist:arg, scalar:idx, scalar:cnt )
string delete( string:arg, scalar:idx )
string delete( string:arg, scalar:idx, scalar:cnt )
Returns arg with the entry idx removed from the vector, vectorlist or string. 
The second form removes cnt entries. 
Argument idx may be positive to remove at the position counting
from the start, or negative to start counting from the end(with -1 being the last entry of 
the vector/vectorlist/string). Argument cnt must be larger or equal to zero.
error=undef error( ... )
Outputs all arguments as text to the console.
Origin file and line number is prepended and a newline is appended if none in the last argument.
The gcmc executable will return non-zero if error() is executed.
exp=float exp( scalar:val )
Return the exponentiation of val with base e.
The returned value has no units associated.
fixpos_restore=undef fixpos_restore( scalar:g28g30 )
undef fixpos_restore( scalar:g28g30, vector:rapid )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
rapid vector Rapid before restoring predefined position
Emit a G28 or G30 gcode (goto predefined position). If g28g30 evaluates to false then G28 is used, otherwise G30. 
The argument rapid defines a rapid move in absolute coordinates to perform before the rapid move to the indicated
stored position is performed. A warning is emitted if the position was never stored using fixpos_store or 
set using fixpos_set before restored and gcmc is internally tracked position is set to [0, 0, 0, 0, 0, 0, 0, 0, 0].
fixpos_set=undef fixpos_set( scalar:g28g30, vector:pos )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
pos vector Absolute position to set at stored entry
Set the position pos for use in use in G28 and G30. 
If g28g30 evaluates to false then G28 position is set, otherwise G30 position is set.
This function is an administrative function to allow fixpos_restore() 
to be called without emitting a warning. The G28/G30 positions are often machine 
dependent variables and gcmc has no means of knowing them unless set explicitly.
fixpos_store=undef fixpos_store( scalar:g28g30 )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
Emit a G28.1 or G30.1 gcode (store current absolute position). If g28g30 evaluates to false then G28.1 is used, otherwise G30.1.
floor=float floor( scalar:val )
val scalar Any number. Return the largest integral number not greater than val.
Units are preserved.
head=vector head( vector:arg, scalar:nr )
vectorlist head( vectorlist:arg, scalar:nr )
string head( string:arg, scalar:nr )
Returns the first nr number of entries from arg as a vector, vectorlist or string. 
If arg is a vector and has fewer than nr entries, 
then the result is padded with undef until the result has nr entries.
If arg is a vectorlist or string and has fewer than nr entries, 
then only the available entries are returned.
If nr is negative then a vector/vectorlist/string is returned with nr fewer entries than count(arg).
insert=vector insert( vector:arg, scalar:val, scalar:idx )
vector insert( vector:arg, vector:val, scalar:idx )
vectorlist insert( vectorlist:arg, vector:val, scalar:idx )
vectorlist insert( vectorlist:arg, vectorlist:val, scalar:idx )
string insert( string:arg, string:val, scalar:idx )
Returns arg with value val inserted into the vector/vectorlist/string at position idx. 
Inserting a scalar val into a vector or vector val into a vectorlist inserts one single entry. 
Inserting a vector val into a vector or vectorlist val into 
a vectorlist inserts all of the contained entries from val.
The idx argument specifies the location of insertion.
isangle=integer isangle( scalar:arg )
Return an integer(boolean) which is true (1)
if arg has the tested units and false (0) otherwise.
isconst=integer isconst( string:arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isdefined=integer isdefined( string:arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isdeg=integer isdeg( scalar:arg )
Return an integer(boolean) which is true (1)
if arg has the tested units and false (0) otherwise.
isdistance=integer isdistance( scalar:arg )
Return an integer (boolean) which is true (1)
if arg has the tested units and false (0) otherwise.
isfloat=integer isfloat( scalar:arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isinch=integer isinch( scalar:arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isint=integer isinch( scalar:arg )These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
ismm=integer ismm( scalar:arg )
Return an integer (boolean) which is true (1)
if arg has the tested units and false (0) otherwise.
ismodemm=integer ismodemm( )
Returns an integer (boolean) which is true (1)
if gcmc is run in millimeter mode and false (0) if run in inch mode (option -i/--imperial).
isnone=integer isnone( scalar:arg )
Return an integer (boolean) which is true (1)
if arg has the tested units and false (0) otherwise. 
israd=integer israd( scalar:arg )
Return an integer (boolean) which is true (1)
if arg has the tested units and false (0) otherwise.
isrelative=integer isrelative()
Returns an integer (boolean) which is true (1)
if the output is set to relative mode (-r option) and false (0) otherwise.
isscalar=integer isscalar( arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isstring=integer isstring( arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isundef=integer isundef( arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isvector=integer isvector( arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
isvectorlist=integer isvectorlist( arg )
These functions return an integer (boolean) which is true (1)
if arg is of tested type and false (0) otherwise.
length=float length( vector:arg )
arg vector [distance] Vector for length determination.
Returns the length of arg calculated as sqrt(arg * arg).
literal=undef literal( ... )
Outputs all arguments as text into the output. Note that the literal() 
function does not terminate the line with a newline and you must provide 
the newline as a string argument if the line must be terminated.
log10=float log10( scalar:val )
Return the logarithm of val with base 10.
The returned value has no units associated.
log2=float log2( scalar:val )
Return the logarithm of val with base 2.
The returned value has no units associated.
loge=float loge( scalar:val )
Return the logarithm of val with base e.
The returned value has no units associated.
message=undef message( ... )
Outputs all arguments as text to the console. 
normalize=vector normalize( vector:arg )
Returns the scaled version of arg such that length(normalize(arg)) equals 1.0.
The resulting normalized vector has no units associated.
pause=undef pause()
undef pause( scalar:optionalstop )
Emit an M0 gcode (forced pause) if optionalstop evaluates to false or is not specified.
Otherwise, emit an M1 gcode (optional pause) if optionalstop evaluates to true.
pi=float pi( )
Returns pi (3.141529.....).
position=vector position( )
vector position( scalar:naxes )
naxes scalar Maximum number of axis to return. Must be ≥ 1 and less or equal 
the number of active axes (6 or 9).
Returns the current absolute position as a vector. 
The default number of coordinates returned is 3 (XYZ). 
The maximum number of coordinates returned is 6 or 9, 
depending whether 9-axis mode is enabled on the command-line. 
The optional argument naxes limits the number of axis returned.
pow=float pow( scalar:x, scalar:y )
Return the x raised to the power y. The returned value has no units associated.
relocate=undef relocate()
undef relocate( vector:offs )
Sets a relative offset for any axis on all subsequent output of any path. 
The relative offset is applied to the coordinates just before they are output. 
reverse=vector reverse( vector:arg )
vectorlist reverse( vectorlist:arg )
string reverse( string:arg )
Returns the reversed version of arg such that all coordinates of a vector, 
vectors of a vectorlist or characters of a string are reversed.
I.e. the first becomes the last, etc..
rootate_xy=vector rotate_xy( vector:arg, scalar:angle )
vectorlist rotate_xy( vectorlist:arg, scalar:angle )
Returns arg rotated by angle. The plane of rotation is XY.
If arg is of type vectorlist, then each containing vector is rotated and a vectorlist is returned.
rootate_xz=vector rotate_xz( vector:arg, scalar:angle )
vectorlist rotate_xz( vectorlist:arg, scalar:angle )
Returns arg rotated by angle. The plane of rotation is XZ.
If arg is of type vectorlist, then each containing vector is rotated and a vectorlist is returned.
rootate_yz=vector rotate_yz( vector:arg, scalar:angle )
vectorlist rotate_yz( vectorlist:arg, scalar:angle )
Returns arg rotated by angle. The plane of rotation is YZ. 
If arg is of type vectorlist, then each containing vector is rotated and a vectorlist is returned.
round=
scale=vector scale( vector:arg, vector:mult )
vectorlist scale( vectorlist:arg, vector:mult )
Multiply arg with coefficients from mult. 
Where mult can be seen as the primary diagonal of a multiplication matrix. 
If the first argument is of type vectorlist, 
then each containing vector of arg is iterated and scaled separately.
sign=float sign( scalar:val )
Returns +1.0 if val is greater or equal 0.0 and -1.0 
if val is negative. The returned value has no units associated.
sin=float sin( scalar:angle )
Return the sine of angle. 
The returned value has no units associated.
sqrt=float sqrt( scalar:val )
Return the square root of val. 
The returned value has no units associated.
tail=vector tail( vector:arg, scalar:nr )
vectorlist tail( vectorlist:arg, scalar:nr )
string tail( string:arg, scalar:nr )
Returns the last nr number of entries from arg as a vector, vectorlist or string. 
If arg is a vector and has fewer than nr entries, 
then the result is prepended with undef until the result has nr entries.
If arg is a vectorlist or string and has fewer than nr entries, then only the available entries are returned.
If nr is negative then a vector/vectorlist/string is returned with nr fewer entries than count(arg).
tan=float tan( scalar:angle )
Return the tangent of angle. The returned value has no units associated
to_chr=string to_chr( integer:arg )
Returns arg converted to a string with one Unicode character with the value of arg.
to_deg=scalar to_deg( scalar:arg )
vector to_deg( vector:arg )
vectorlist to_deg( vectorlist:arg )
Returns arg / pi() * 180.0 (deg) if arg has unit radians, returns arg otherwise. 
Vectors and vectorlists are iterated over all scalars contained in them 
and return vector or vectorlist.
to_distance=scalar to_distance( scalar:arg )
vector to_distance( vector:arg )
vectorlist to_distance( vectorlist:arg )
Returns arg converting any value without distance units to have distance units. 
The units depend on the command-line setting whether metric or imperial is used according to following rules:
1   → 1mm
1mm → 1mm
1in → 1in
to_float=float to_float( scalar:arg )
vector to_float( vector:arg )
vectorlist to_float( vectorlist:arg )
float to_float( string:arg )
Convert arg to floating point. Vectors and vectorlists are iterated over all scalars contained in them and return vector or vectorlist. 
Undef is returned as undef and units are preserved.
to_in=An alias for to_inch().
to_inch=scalar to_in( scalar:arg )
vector to_in( vector:arg )
vectorlist to_in( vectorlist:arg )
scalar to_inch( scalar:arg )
vector to_inch( vector:arg )
vectorlist to_inch( vectorlist:arg )
Returns arg coverted to inch. If arg has no units or already is in inch, 
then no conversion is performed. Vectors and vectorlists are iterated over 
all scalars contained in them and return vector or vectorlist. Conversions:
1 -> 1in
1mm -> 0.03937008in
1in -> 1in
to_int=integer to_int( scalar:arg )
vector to_int( vector:arg )
vectorlist to_int( vectorlist:arg )
integer to_int( string:arg )
integer to_int( string:arg, integer:base )
Convert arg to integer
to_mm=scalar to_mm( scalar:arg )
vector to_mm( vector:arg )
vectorlist to_mm( vectorlist:arg )
Returns arg coverted to mm. If arg has no units or already is in mm, then no conversion is performed. 
Vectors and vectorlists are iterated over all scalars contained in them and return vector or vectorlist. 
to_native=scalar to_native( scalar:arg )
vector to_native( vector:arg )
vectorlist to_native( vectorlist:arg )
Returns arg converting any value to gcode native representation.
Vectors and vectorlists are iterated over all scalars contained 
in them and return vector or vectorlist.
to_none=scalar to_none( scalar:arg )
vector to_none( vector:arg )
vectorlist to_none( vectorlist:arg )
Returns arg stripping any associated units. 
to_rad=scalar to_rad( scalar:arg )
vector to_rad( vector:arg )
vectorlist to_rad( vectorlist:arg )
Returns arg * pi() / 180.0 (rad) if arg has unit degrees, 
returns arg otherwise.
to_string=Returns arg and any additional arguments converted and concatenated to a string. 
to_val=integer to_val( string:arg )
Returns the first Unicode character of arg converted to an integer value without units.
Any additional characters in the argument are ignored. Zero is returned if the string is empty.
typeset=vectorlist typeset( string:text, integer:fontid )
text stringThe text to typeset in UTF-8 format.
fontid integer [no unit] Reference ID of the font to use.
Returns a vectorlist with all strokes to write out text shaped using 
the font-face as defined by the fontid argument. 
The vectorlist includes pen-up and pen-down vectors so movement 
can be separated into engraving and non-engraving.
warning=undef warning( ... )
Outputs all arguments as text to the console. 
arc_ccw=vector arc_ccw( vector:endpoint, scalar:radius )
vector arc_ccw( vector:endpoint, scalar:radius, scalar:turns )
endpoint vector [distance] Endpoint coordinate of the arc.
radius scalar [angular] Radius of the arc. Radius must not be zero.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_ccw_r=vector arc_ccw_r( vector:endpoint, scalar:radius )
vector arc_ccw_r( vector:endpoint, scalar:radius, scalar:turns )
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_cw=vector arc_cw( vector:endpoint, scalar:radius )
vector arc_cw( vector:endpoint, scalar:radius, scalar:turns )
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_cw_r=vector arc_cw_r( vector:endpoint, scalar:radius )
vector arc_cw_r( vector:endpoint, scalar:radius, scalar:turns )
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
circle_ccw=undef circle_ccw( vector:centerpoint )
undef circle_ccw( vector:centerpoint, scalar:turns )
undef circle_ccw( scalar:radius, scalar:angle )
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.
circle_ccw_r=undef circle_ccw_r( vector:centerpoint )
undef circle_ccw_r( vector:centerpoint, scalar:turns )
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.
circle_cw=undef circle_cw( vector:centerpoint )
undef circle_cw( vector:centerpoint, scalar:turns )
undef circle_cw( scalar:radius, scalar:angle, scalar:turns )
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.
circle_cw_r=undef circle_cw_r( vector:centerpoint )
undef circle_cw_r( vector:centerpoint, scalar:turns )
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.
coolant=ndef coolant( scalar:state )
undef coolant( string:state )
Enable/disable coolant (M7, M8, M9). Argument state must be one of:
COOLANT_OFF     (0) "off" coolant off
COOLANT_MIST    (1) "mist" coolant mist
COOLANT_FLOOD   (2) "flood" coolant flood
COOLANT_ALL     (3) "mist+flood" coolant mist+flood
drill=undef drill( vector:drillpoint, scalar:retract, scalar:increment )
undef drill( vector:drillpoint, scalar:retract, scalar:increment, scalar:repeat )
drillpoint vector [distance] Endpoint of the drill-hole.
retract scalar [distance] Endpoint of the Z-axis after drilling.
increment scalar [distance] Increments of the Z-axis before retracting temporarily.
repeat scalar [no units] Number of repeats of the drill-cycle. 
Repeats must be larger the zero.
Perform a drill-cycle to drillpoint with retract denoting the retract (Z) position after the cycle,
increment the Z-axis increments and optional repeat repeats.
dwell=undef dwell( scalar:time )
Pause (G4) for time seconds.
feedmode=undef feedmode( scalar:mode )
undef feedmode( string:mode )
Feed rate mode setting to one of the following:
FEEDMODE_INVERSE (0) "inverse" Inverse Time Mode (G93)
FEEDMODE_UPM     (1) "upm" Units Per Minute (G94) (default)
FEEDMODE_UPR     (2) "upr" Units Per Revolution (G95)
feedrate=undef feedrate( scalar:rate )
Set feedrate (F) to rate. The rate is interpreted following the setting of the feedmode() function.
pathmode=undef pathmode( scalar:exact )
undef pathmode( scalar:pathtol, scalar:colintol )
The single argument form emits a G61 (exact path mode) gcode when exact is true 
and a G64 gcode (best possible speed) when exact is false.
The dual argument form emits a G64 with path tolerance (P-parameter) set to pathtol and 
the co-linearity tolerance (Q-parameter) to colintol. 
If you only intent to use/set the path tolerance, then you should set colintol to <undef> to suppress 
the Q-parameter or set both pathtol and colintol to the same value.
plane=integer plane( scalar:mode )
integer plane( string:mode )
Set the current operational plane to mode or return the current active plane. 
Argument mode may be one of the following:
  scalar (value) string Description
     PLANE_QUERY (undef) return current plane as integer
     PLANE_XY (0) "XY" set XY plane and return previous value (G17)
     PLANE_XZ (1) "XZ" set XZ plane and return previous value (G18)
     PLANE_YZ (2) "YZ" set YZ plane and return previous value (G19)
The previously active plane is returned if the plane is set. 
The current plane of operation is returned as an integer if mode is undef.
spindle=undef spindle( scalar:speed )
Enable/disable spindle turning and set the spindle speed, where speed should be:
  scalar Description
    <0 spindle counter clockwise (M4)
    0 spindle off (M5)
    >0 spindle clockwise (M3)
The spindle speed is set with an S command to abs(speed) before the spindle is enabled.
spindlespeed=undef spindlespeed( scalar:speed )
Set the spindle speed (S) to speed.
toolchange=undef toolchange( scalar:toolnr )
undef toolchange( scalar:toolnr, scalar:setoffs )
Change tool (T) to toolnr. An M6 code is also emitted to perform the actual tool change. 
If setoffs evaluates to true, then a G43 code is also emitted to set the tools offset.

const=declare variable as constants
function=function definition
break=break any loop construct
continue=continue to start of loop
return=return from function
include=include other file
local=local variable scope declarator
in=inch measurement modifier
mil=mil measurement modifier (0.001)
mm=millimeter measurement modifier
deg=degree measurement modifier
rad=radians measurement modifier
for=The for() construct expects three semi-colon separated arguments 
where the fist indicates the initialization, 
the second is the loop condition and the third argument an increment statement. 
Both the initialization and the increment statement may be omitted,
in which the for() behaves exactly like a while() loop. 
Example:
for(i \= 0; i < 10; i++) {
 do_something(i);
}
foreach=The foreach() construct expects two semi-colon separated arguments 
where the first is a vector or vector-list type and the second an identifier (loop-variable). 
The identifier is assigned a copy of each vector from the vector-list, 
or scalar from the vector, before executing the loop content. 
The loop-variable may contain en empty vector or undef if 
the source vector-list or source vector contains them. 
Example:
foreach(list; v) {
 move(v);
 }
do=The do/while() construct expects one arguments that functions as the loop condition. 
The loop repeats for as long as the condition evaluates to true and executes at least once. 
The while() clause must be terminated with a semicolon. 
Example:
do {
 res \= complex_algo_update(arg1, arg2);
} while(res > limit);
while=The while() construct expects one arguments that functions as the loop condition. 
The loop repeats for as long as the condition evaluates to true. Example:
while(complex_algo_check()) {
 complex_algo_update(arg1, arg2);
}
if=Conditionals start with an if() clause and may include as many elif() clauses as you need. 
Optionally they may end with an else clause. 
The arguments to if() and elif() are evaluated to boolean expressions. Examples:
if(value > 43) {
            /* bla */
} elif(value < 0) {
            /* Negative bla */
} else {
            /* None of the above bla */
}
elif=Conditionals start with an if() clause and may include as many elif() clauses as you need. 
Optionally they may end with an else clause. 
The arguments to if() and elif() are evaluated to boolean expressions. Examples:
if(value > 43) {
            /* bla */
} elif(value < 0) {
            /* Negative bla */
} else {
            /* None of the above bla */
}
else=Conditionals start with an if() clause and may include as many elif() clauses as you need. 
Optionally they may end with an else clause. 
The arguments to if() and elif() are evaluated to boolean expressions. Examples:
if(value > 43) {
            /* bla */
} elif(value < 0) {
            /* Negative bla */
} else {
            /* None of the above bla */
}
repeat=The repeat construct is a simple loop that repeats the loop a number of times 
indicated by the first argument, which must result in an integer scalar value. 
Both positive and negative repeats are allowed. 
The number of loops in a repeat is the absolute value of the scalar.
An optional second argument to repeat exposes the loop-variable, 
which will count 1, 2, 3,... for positive repeats and -1, -2, -3,... for negative repeats.
Repeat loops should specify a scalar of integer value and no units associated. 
repeat(5) {
   move_r([-, 1]); /* Incremental move in Y 5 times */
   dwell(0.5)      /* And wait 0.5s before continuing */
}
repeat(10; i) {
   move([val * i / 10.0]);
}

