<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>GCMC- G-Code Meta Compiler</title>
</head>
<body bgcolor="#8DEAFF">
    <h1>gcmc - G-Code Meta Compiler</h1>
    <p>  <a href="gcmc.htm">Back</a> </p>
    <h2>Library functions</h2>
    <ul>
        <li>
            Output canned drilling cycles
            <ul>
                <li>
                    <a href="#lib_canned_drill_inc_gcmc">canned_drill.inc.gcmc</a>
                    <ul>
                        <li><a href="#canned_drill">canned_drill</a></li>
                        <li><a href="#canned_drill_peck">canned_drill_peck</a></li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            Output traced vectorlists
            <ul>
                <li>
                    <a href="#lib_tracepath_inc_gcmc">tracepath.inc.gcmc</a>
                    <ul>
                        <li><a href="#tracepath">tracepath</a></li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            Output engraving from typeset text
            <ul>
                <li>
                    <a href="#lib_engrave_inc_gcmc">engrave.inc.gcmc</a>
                    <ul>
                        <li><a href="#engrave">engrave</a></li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            Toolsize compensated path creation
            <ul>
                <li>
                    <a href="#lib_tracepath__comp_inc_gcmc">tracepath_comp.inc.gcmc</a>
                    <ul>
                        <li><a href="#tracepath_comp">tracepath_comp</a></li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            Vectorized arcs and circles
            <ul>
                <li>
                    <a href="#lib_varcs_inc_gcmc">varcs.inc.gcmc</a>
                    <ul>
                        <li><a href="#varc_cw">varc_cw</a></li>
                        <li><a href="#varc_ccw">varc_ccw</a></li>
                        <li><a href="#vcircle_cw">vcircle_cw</a></li>
                        <li><a href="#vcircle_ccw">vcircle_ccw</a></li>
                    </ul>
                </li>
            </ul>
        </li>
        <li>
            Vectorized Bezier curves
            <ul>
                <li>
                    <a href="#lib_vbezier_inc_gcmc">vbezier.inc.gcmc</a>
                    <ul>
                        <li><a href="#vbezier2">vbezier2</a></li>
                        <li><a href="#vbezier3">vbezier3</a></li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul><hr><h2 id="lib_canned_drill_inc_gcmc">canned_drill.inc.gcmc</h2>
    <div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">undef</span>
            <span class="gcmc_func" id="canned_drill">canned_drill</span>
            (
            <span class="gcmc_type">vectorlist:</span><span class="gcmc_arg">holelist</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">retractz</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">dw</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">oldz</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">holelist</td>
                    <td class="gcmc_type">vectorlist</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vectors pointing to the holes to drill</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">retractz</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Z-axis retract level (R-plane)</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">dw</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Dwell time at bottom of hole if ≥0. No dwell is performed if &lt;0</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">oldz</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Boolean to indicate if retract should return to original Z</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Perform a canned drilling cycle with optional
            dwelling at the bottom of the hole. The position of the holes are set by the
            <span class="gcmc_arg">holelist</span> argument where <span class="gcmc_arg">holelist[0]</span>
            must include a Z-coordinate to set the drilling depth. Each vector in
            <span class="gcmc_arg">holelist</span> may include X-, Y- or both
            XY-coordinates to set the position of each drill-hole. An optional
            Z-coordinate for each vector in <span class="gcmc_arg">holelist</span> may set
            a new drilling depth for the following hole(s).<br><br>
            The <span class="gcmc_arg">retractz</span> argument sets the R-plane. The
            R-plane defines the Z-level at which further down-movement is performed at the
            current feedrate. The actual retraction point depends on
            <span class="gcmc_arg">oldz</span>, where true means full retraction to the
            Z-level before the <span class="gcmc_func">canned_drill</span>() function was
            called. Setting <span class="gcmc_arg">oldz</span> to false retracts to the
            R-plane after each drilling sequence. The <span class="gcmc_arg">retractz</span>
            level is used instead of the original Z-level if the original Z-level was below
            the R-plane.<br><br>
            The <span class="gcmc_func">canned_drill</span>() function calls
            <a href="gcmc-funcref.htm#pathmode" class="gcmc_func">pathmode</a>(1) to set
            exact path mode before attempting any movement.
        </div>
    </div>
    <hr class="gcmc_separator"><div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">undef</span>
            <span class="gcmc_func" id="canned_drill_peck">canned_drill_peck</span>
            (
            <span class="gcmc_type">vectorlist:</span><span class="gcmc_arg">holelist</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">retractz</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">incr</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">oldz</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">holelist</td>
                    <td class="gcmc_type">vectorlist</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vectors pointing to the holes to drill</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">retractz</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Z-axis retract level (R-plane)</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">incr</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Incremental drilling depth; must be &gt;0</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">oldz</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Boolean to indicate if retract should return to original Z</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Perform a canned peck-drilling cycle with <span class="gcmc_arg">incr</span> denoting the incremental down-move distance before
            clearing the hole. The position of the holes are set by the
            <span class="gcmc_arg">holelist</span> argument where <span class="gcmc_arg">holelist[0]</span>
            must include a Z-coordinate to set the drilling depth. Each vector in
            <span class="gcmc_arg">holelist</span> may include X-, Y- or both
            XY-coordinates to set the position of each drill-hole. An optional
            Z-coordinate for each vector in <span class="gcmc_arg">holelist</span> may set
            a new drilling depth for the following hole(s).<br><br>
            The <span class="gcmc_arg">retractz</span> argument sets the R-plane. The
            R-plane defines the Z-level to reach to clear the hole. The final retraction
            point depends on <span class="gcmc_arg">oldz</span>, where true means full
            retraction to the Z-level before the <span class="gcmc_func">canned_drill_peck</span>()
            function was called. Setting <span class="gcmc_arg">oldz</span> to false
            retracts to the R-plane after each drilling sequence. The
            <span class="gcmc_arg">retractz</span> level is used instead of the original
            Z-level if the original Z-level was below the R-plane.<br><br>
            The <span class="gcmc_func">canned_drill_peck</span>() function calls
            <a href="gcmc-funcref.htm#pathmode" class="gcmc_func">pathmode</a>(1) to set
            exact path mode before attempting any movement.
        </div>
    </div>
    <div class="gcmc_indent">
        <h4>Canned drilling examples</h4>
        See also the distribution's example file <i>example/canned.gcmc</i>.
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("canned_drill.inc.gcmc");

homepos = [0mm, 0mm, 0mm];
initpos = [-1mm, -1mm, 10mm];	/* Somewhere to start */

retract = 5.0mm;		/* R-plane level */
incr = 2.2mm;			/* Peck increment */

<a href="gcmc-funcref.htm#feedrate" class="gcmc_func">feedrate</a>(100.0mm);

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(homepos);
<a href="gcmc-funcref.htm#move" class="gcmc_func">move</a>(homepos);	/* Just to let LinuxCNC show a line in the preview */

/* A set of holes */
holes = {
	[10mm, 0mm, -5mm],	/* First hole at 10,0 depth -1 */
	[15mm],			/* Second hole at X=15 same Y and depth */
	[20mm],
	[25mm],
	[-, 5mm],		/* Move only in Y */
	[20mm],
	[15mm, -, -6mm],	/* Set new drilling depth */
	[10mm]
};

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(initpos);
<a href="#canned_drill" class="gcmc_func">canned_drill</a>(holes, retract, -1, 0);	/* Drill a set of holes */

/* Set a new set of holes with explicit coordinates */
holes = {
	[10mm, 20mm, -5mm],
	[15mm, 20mm],
	[20mm, 20mm],
	[25mm, 20mm],
	[25mm, 25mm],	
	[20mm, 25mm],
	[15mm, 25mm, -6mm],
	[10mm, 25mm]
};

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(initpos + [-, 20]);
<a href="#canned_drill_peck" class="gcmc_func">canned_drill_peck</a>(holes, retract, incr, 1);	/* Peck-drilling */

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(head(homepos, 2));
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(homepos);</pre>
    </div>
    <hr><h2 id="lib_tracepath_inc_gcmc">tracepath.inc.gcmc</h2>
    <div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">undef</span>
            <span class="gcmc_func" id="tracepath">tracepath</span>
            (
            <span class="gcmc_type">vectorlist:</span><span class="gcmc_arg">path</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">z</span> = undef(),
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">dw</span> = -1
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">path</td>
                    <td class="gcmc_type">vectorlist</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vectors pointing to the XY positions to visit</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">z</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Cutting plane Z-level</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">dw</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Dwell time at bottom each point if ≥0. No dwell is performed if &lt;0</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Cut a path at depth <span class="gcmc_arg">z</span>
            following all points as defined by <span class="gcmc_arg">path</span>. The
            <span class="gcmc_func">tracepath</span>() function performs a preliminary
            movement to <span class="gcmc_arg">path[0]</span> at the current Z-level, moves
            to cutting depth according to the <span class="gcmc_arg">z</span> argument,
            visits each vector of <span class="gcmc_arg">path</span> and finally retracts
            to original Z-level. Movement in the Z-axis can be suppressed by setting the
            <span class="gcmc_arg">z</span> argument to <a class="gcmc_func" href="gcmc-funcref.htm#undef">undef</a>(),
            which is the default if not specified.<br><br>
            A dwell of length <span class="gcmc_arg">dw</span> is performed at each point
            in the path if it is ≥0. Any negative value of <span class="gcmc_arg">dw</span>
            will suppress dwelling. No dwelling is performed if the argument is not supplied.
            <br>
        </div>
    </div>
    <div class="gcmc_indent">
        <h4>Tracepath example</h4>
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("tracepath.inc.gcmc");

starpath = {
	[ 1,  1], [ 0,  3],
	[-1,  1], [-3,  0],
	[-1, -1], [ 0, -3],
	[ 1, -1], [ 3,  0]
};

SAFEZ = [0mm, 0mm, 1mm];

<a href="gcmc-funcref.htm#feedrate" class="gcmc_func">feedrate</a>(100.0mm);
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(SAFEZ);

starpath *= 10mm;	<span class="gcmc_comment">/* Scale the star */</span>

<a href="#tracepath" class="gcmc_func">tracepath</a>(starpath, -1mm, -1);

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(SAFEZ);</pre>
    </div>
    <hr><h2 id="lib_tracepath_comp_inc_gcmc">tracepath_comp.inc.gcmc</h2>
    <div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">undef</span>
            <span class="gcmc_func" id="tracepath_comp">tracepath_comp</span>
            (
            <span class="gcmc_type">vectorlist:</span><span class="gcmc_arg">path</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">width</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">flags</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">path</td>
                    <td class="gcmc_type">vectorlist</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vectors pointing to the XY positions to visit.</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">width</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Compensation distance</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">flags</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>
                        Binary flags or'ed together to set the operational mode:
                        <table><tbody><tr><td>TPC_CLOSED</td><td>Interpret path as being closed (path[0] and path[-1] are connected)</td></tr><tr><td>TPC_KEEPZ</td><td>Don't move on Z-axis and ignore all Z-coordinates of the path</td></tr><tr><td>TPC_OLDZ</td><td>Return to Z-coordinate where it was before calling the function</td></tr><tr><td>TPC_LEFT</td><td>Trace at left side of path</td></tr><tr><td>TPC_RIGHT</td><td>Trace at right side of path (default)</td></tr><tr><td>TPC_ARCIN</td><td>Arc in-to the path</td></tr><tr><td>TPC_ARCOUT</td><td>Arc out-of the path</td></tr><tr><td>TPC_QUIET</td><td>Don't warn on unreachable inside corners</td></tr></tbody></table>
                    </td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Cut the <span class="gcmc_arg">path</span> at a
            tool-compensated distance of <span class="gcmc_arg">width</span> at the left or
            right side of the path. The right side, set by flag <span class="gcmc_arg">TPC_RIGHT</span>,
            is seen as being right from a path that moves in positive Y-direction. The left
            side, set by flag <span class="gcmc_arg">TPC_LEFT</span>, is consequently on
            the left from a path moving in positive Y-direction.<br><br>
            The cutting depth is set by the Z-coordinate of the first entry at <span class="gcmc_arg">path[0]</span>.
            Subsequent path entries may contain same or different Z-coordinates. All
            Z-coordinates will be ignored when flag <span class="gcmc_arg">TPC_KEEPZ</span>
            is set and no Z-axis movement is performed. The Z-coordinate at function-entry
            will be restored with a rapid when the <span class="gcmc_arg">TPC_OLDZ</span>
            flag is set<br><br>
            Entry and exit of the path is controlled by the <span class="gcmc_arg">TPC_ARCIN</span>
            and <span class="gcmc_arg">TPC_ARCOUT</span> flags. The path is entered with a
            90 degree arc to the normal at the first point and exited with a 90 degree arc
            from the normal at the last point respectively. The arc's radius is equal to
            <span class="gcmc_arg">width</span>.  If the flag is unset, then a linear,
            perpendicular to the segment, move is performed of length <span class="gcmc_arg">width</span>.<br><br>
            Internal corners which are too small to enter will be deleted from the path and
            a warning is issued, unless the <span class="gcmc_arg">TPC_QUIET</span> is set.
            Entering and exiting a closed path on a corner of &lt;180 degrees will result
            in a warning because the entry and exit positions will cause an inward cut less
            than <span class="gcmc_arg">width</span>. Co-linear segments are combined into
            a single segment. A warning is emitted if a Z-axis change is detected on to
            points with equal X- and Y-coordinates.<br><br>
            Note: Only one point look-ahead is performed on calculations and segments.
            Therefore, unreachable internal pockets and angles are not detected if hidden
            beyond one point look-ahead. You should always check the result before
            accepting it.
        </div>
    </div>
    <div class="gcmc_indent">
        <h4>Tool-compensated trace example</h4>
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("tracepath_comp.inc.gcmc");

starpath = {
	[ 0,  3], [-1,  1],
	[-3,  0], [-1, -1],
	[ 0, -3], [ 1, -1],
	[ 3,  0], [ 1,  1]
};

HOME = [0.0mm, 0.0mm, 1.0mm];

<a href="gcmc-funcref.htm#feedrate" class="gcmc_func">feedrate</a>(100.0mm);
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(HOME);
<a href="gcmc-funcref.htm#move" class="gcmc_func">move</a>(HOME);			<span class="gcmc_comment">// To visualize following rapids</span>

starpath *= 10.0mm;		<span class="gcmc_comment">// Scale the star</span>

<span class="gcmc_comment">// Show original path as rapids</span>
<a href="gcmc-syntax.htm#foreeach" class="gcmc_func">foreach</a>(starpath; v) {
        <a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(v);
}

starpath[0][2] = -1.0mm;	<span class="gcmc_comment">// Set the cutting depth</span>
<a href="#tracepath_comp" class="gcmc_func">tracepath_comp</a>(starpath, 2.0mm, TPC_OLDZ|TPC_RIGHT|TPC_ARCIN|TPC_ARCOUT|TPC_CLOSED);

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(HOME);</pre>
    </div>
    <hr><h2 id="lib_engrave_inc_gcmc">engrave.inc.gcmc</h2>
    <div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">undef</span>
            <span class="gcmc_func" id="engrave">engrave</span>
            (
            <span class="gcmc_type">vectorlist:</span><span class="gcmc_arg">strokes</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">zup</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">zdown</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">strokes</td>
                    <td class="gcmc_type">vectorlist</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vectors pointing to the XY positions to visit</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">zup</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Pen-up level, i.e. non-engraving-plane/safe Z-level</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">zdown</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Pen-down level, i.e. engraving-plane Z-level</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Engrave/cut a path at depth <span class="gcmc_arg">zdown</span>
            following all points as defined by <span class="gcmc_arg">strokes</span>. The
            points in the path usually come from the
            <a class="gcmc_func" href="gcmc-funcref.htm#typeset">typeset</a>() function
            after scaling and positioning the XY coordinates. The Z-coordinate holds the
            instructions for pen-up/down movements.<br><br>
            The <span class="gcmc_arg">strokes</span> argument must include separate
            vectors which have only a Z-coordinate. A Z-coordinate value of 0.0 means
            pen-down. Any value &gt;0.0 means pen-up. A pen-down instruction will execute a
            <a class="gcmc_func" href="gcmc-funcref.htm#move">move</a>([-,&nbsp;-,&nbsp;<span class="gcmc_arg">zdown</span>])
            and a pen-up instruction will execute a
            <a class="gcmc_func" href="gcmc-funcref.htm#goto">goto</a>([-,&nbsp;-,&nbsp;<span class="gcmc_arg">zup</span>]).<br><br>
            All other vectors in the <span class="gcmc_arg">strokes</span> argument should
            have both X and Y coordinates set. A <a class="gcmc_func" href="gcmc-funcref.htm#move">move</a>()
            is executed for each vector from the list while the pen is downand a
            <a class="gcmc_func" href="gcmc-funcref.htm#goto">goto</a>() for each vector
            while the pen is up.<br><br>
            The construction of the <span class="gcmc_arg">strokes</span> argument should
            have the following format (which <a class="gcmc_func" href="gcmc-funcref.htm#typeset">typeset</a>() follows):
<pre class="gcmc_indent gcmc_example">veclist[0]   = [-, -, 1.0];			<span class="gcmc_comment">/* Pen-up */</span>
veclist[1]   = [x0, y0, -];			<span class="gcmc_comment">/* Left-bottom corner of text */</span>
<span class="gcmc_comment">/* Strokes of the glyphs follow */</span>
veclist[2]   = [x, y, -];			<span class="gcmc_comment">/* Entry point for first stroke */</span>
veclist[3]   = [-, -, 0.0];			<span class="gcmc_comment">/* Pen-down */</span>
... lots of entries up to n-2 ...
veclist[n-1] = [-, -, 1.0];			<span class="gcmc_comment">/* Pen-up */</span>
veclist[n]   = [end_x_pos, end_y_pos, -];	<span class="gcmc_comment">/* Final position would be start of next glyph */</span>
</pre>
        </div>
    </div>
    <div class="gcmc_indent">
        <h4>Text engraving example</h4>
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("engrave.inc.gcmc");

<a href="gcmc-funcref.htm#feedrate" class="gcmc_func">feedrate</a>(100.0mm);

text = "Hello World! All your Glyphs are belong to us.";
sf = 2.5mm;	<span class="gcmc_comment">/* Scaling factor for 2.5mm height characters */</span>

<span class="gcmc_comment">/*
 * Engrave a scaled version of a typeset text.
 *
 * The height of the returned typeset text is by definition 1.0. The height is
 * relative to the upper case letter 'X' of the font-face. The line-offset is
 * usually in the order of two times the font-height.
 */</span>

<span class="gcmc_comment">/* Typeset the text */</span>
vl = <a href="gcmc-funcref.htm#typeset" class="gcmc_func">typeset</a>(text, FONT_HSANS_1);

<span class="gcmc_comment">/* Scale XY to real world coordinates */</span>
<span class="gcmc_comment">/* Do not touch the Z-coordinate, the engrave() function needs the original */</span>
vl = <a href="gcmc-funcref.htm#scale" class="gcmc_func">scale</a>(vl, [sf, sf]);

<span class="gcmc_comment">/* Place somewhere in XY space */</span>
<span class="gcmc_comment">/* Again without touching the Z-coordinate */</span>
vl += [10.0mm, 18.0mm];

<span class="gcmc_comment">/* Engrave it (output move/goto) with pen-up at 1.5mm and pen-down at -1.0mm */</span>
<a href="#engrave" class="gcmc_func">engrave</a>(vl, 1.5mm, -1.0mm);
</pre>
    </div>
    <hr><h2 id="varcs_inc_gcmc">varcs.inc.gcmc</h2>
    <div class="gcmc_indent">
        Vectorized arcs and circles always return a vectorlist calculated from the
        origin [0.0,&nbsp;0.0] or [0.0,&nbsp;0.0,&nbsp;0.0] of the coordinate system.
        The origin point is not included in the vectorlist. The vectorlist is
        calculated in 2D when two coordinates are provided in the
        <span class="gcmc_arg">endpoint</span>/<span class="gcmc_arg">centerpoint</span>
        arguments and calculated in 3D when three coordinates are provided. The 2D
        coordinates that must be supplied depend on the plane of calculation,
        <span class="gcmc_arg">actplane</span>, which defaults to the XY plane.<br><br>
        The arc/circle is traced at discrete points at intervals not larger than
        specified to the function. Two constants are used as defaults for maximum
        intervals:
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_const" class="gcmc_func">const</a> VARCS_DEFAULT_MAXL = 0.1mm;
<a href="gcmc-syntax.htm#syntax_const" class="gcmc_func">const</a> VARCS_DEFAULT_MAXA = 1.0deg;
</pre>
        The distance between calculated points is the same for each point. Arcs and
        circles with large radii will normally be limited by the
        <span class="gcmc_arg">maxl</span> argument, whereas small radii will normally
        hit the <span class="gcmc_arg">maxa</span> limit.
    </div>
    <br><div class="gcmc_funcblock">
        <div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="varc_cw">varc_cw</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">endpoint</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">radius</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">turns = 0</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxl = VARCS_DEFAULT_MAXL</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxa = VARCS_DEFAULT_MAXA</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">actplane = PLANE_XY</span>
            )
        </div>
        <div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="varc_ccw">varc_ccw</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">endpoint</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">radius</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">turns = 0</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxl = VARCS_DEFAULT_MAXL</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxa = VARCS_DEFAULT_MAXA</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">actplane = PLANE_XY</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">endpoint</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vector pointing to the endpoint of the arc</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">radius</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>The radius of the arc. Positive value indicates shortest angular path, negative value indicates longest angular path</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">turns</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Additional full circular turns before ending at <span class="gcmc_arg">endpoint</span></td>
                </tr>
                <tr>
                    <td class="gcmc_arg">maxl</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Maximum arc segment distance step size</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">maxa</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[angle]</td>
                    <td>Maximum arc segment angular step size</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">actplane</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Plane of operation, one of PLANE_XY, PLANE_XZ or PLANE_YZ</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            The <span class="gcmc_func">varc_cw</span>() and <span class="gcmc_func">varc_cw</span>()
            functions return a vectorlist with the vectors to each equally distanced
            intermediate point in clockwise and counter-clockwise orientation respectively.
            The arc is calculated from the origin to the <span class="gcmc_arg">endpoint</span>
            with size of <span class="gcmc_arg">radius</span>. The origin is not included
            in the returned vectorlist.<br><br>
            The arc is interpolated between the points determined by actual distance or
            angular movement with a maximum of <span class="gcmc_arg">maxl</span> or
            <span class="gcmc_arg">maxa</span>. The argument resulting in most interpolated
            points is used for the calculation.<br><br>
            The arc is calculated in 2D if only two coordinates are present in the
            <span class="gcmc_arg">endpoint</span>. An optional non-zero third coordinate
            for 3D operation will create a spiral.<br><br>
            The <span class="gcmc_arg">turns</span> argument indicates the number of full
            (circular) turns to perform before the final arc is created.
        </div>
        <hr class="gcmc_separator"><div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="vcircle_cw">vcircle_cw</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">centerpoint</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">turns = 0</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxl = VARCS_DEFAULT_MAXL</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxa = VARCS_DEFAULT_MAXA</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">actplane = PLANE_XY</span>
            )
        </div>
        <div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="vcircle_ccw">vcircle_ccw</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">centerpoint</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">turns = 0</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxl = VARCS_DEFAULT_MAXL</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">maxa = VARCS_DEFAULT_MAXA</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">actplane = PLANE_XY</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">centerpoint</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Vector pointing to the center of the circle</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">turns</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Additional full circular turns before ending back at the origin</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">maxl</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Maximum arc segment distance step size</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">maxa</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[angle]</td>
                    <td>Maximum arc segment angular step size</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">actplane</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Plane of operation, one of PLANE_XY, PLANE_XZ or PLANE_YZ</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            The <span class="gcmc_func">vcircle_cw</span>() and <span class="gcmc_func">vcircle_cw</span>()
            functions return a vectorlist with the vectors to each equally distanced
            intermediate point in clockwise and counter-clockwise orientation respectively.
            The circle is calculated from the origin and all the way back with the center
            located at <span class="gcmc_arg">centerpoint</span>. The origin is not
            included as a start point in the returned vectorlist, but the last point in the
            vectorlist is the origin (possibly offset in the third coordinate).<br><br>
            The circle is interpolated between the points determined by actual distance or
            angular movement with a maximum of <span class="gcmc_arg">maxl</span> or
            <span class="gcmc_arg">maxa</span>. The argument resulting in most interpolated
            points is used for the calculation.<br><br>
            The circle is calculated in 2D if only two coordinates are present in the
            <span class="gcmc_arg">centerpoint</span>. An optional non-zero third
            coordinate for 3D operation will create a spiral.<br><br>
            The <span class="gcmc_arg">turns</span> argument indicates the number of full
            (circular) turns to perform before the final circle is created.
        </div>
    </div>
    <div class="gcmc_indent">
        <h4>Vectorized arcs example</h4>
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("varcs.inc.gcmc");

radius = 25.0mm;
center = [60.0mm, 100.0mm];
zmove  = 20.0mm;
turns  = 5;

cp = <a href="gcmc-funcref.htm#normalize" class="gcmc_func">normalize</a>(center) * radius;	<span class="gcmc_comment">// Center point for calculation. The center point</span>
        <span class="gcmc_comment">// also sets the entry angle for the circle.</span>
cp.z = zmove;				<span class="gcmc_comment">// And put in the z-movement</span>

<span class="gcmc_comment">// Get the basic shape</span>
spiral = <a href="#vcircle_cw" class="gcmc_func">vcircle_cw</a>(cp, turns);

<span class="gcmc_comment">// The origin point in 'spiral' is [0, 0, 0] by definition</span>
<span class="gcmc_comment">// but it has not been included in the vectorlist</span>

<span class="gcmc_comment">// Offset the spiral to the correct location in space</span>
spiral += center - <a href="gcmc-funcref.htm#head" class="gcmc_func">head</a>(cp, 2);

<a href="gcmc-funcref.htm#feedrate" class="gcmc_func">feedrate</a>(300.0mm);

<span class="gcmc_comment">// Goto the starting point og the spiral</span>
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(<a href="gcmc-funcref.htm#head" class="gcmc_func">head</a>(spiral[-1], 2));	<span class="gcmc_comment">// Only in XY</span>
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>([-, -, 0.0mm]);		<span class="gcmc_comment">// Reposition in Z</span>

<span class="gcmc_comment">// And cut to each point</span>
<a href="gcmc-syntax.htm#foreach" class="gcmc_func">foreach</a>(spiral; v) {
        <a href="gcmc-funcref.htm#move" class="gcmc_func">move</a>(v);
}

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>([0.0mm, 0.0mm]);
<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>([-, -, 0.0mm]);
</pre>
    </div>
    <hr><h2 id="vbezier_inc_gcmc">vbezier.inc.gcmc</h2>
    <div class="gcmc_indent">
        Calculate the vectorization of quadratic or cubic Bezier curves. The functions
        return a vectorlist with the interpolated points. The points are not spaced
        equally, but calculated to a certain accuracy using the
        <span class="gcmc_arg">flatness</span> and <span class="gcmc_arg">minl</span>
        arguments as limits.<br><br>
        The accuracy arguments have defaults as set by the following constants:
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_const" class="gcmc_func">const</a> VBEZIER_DEFAULT_FLATNESS = 1.0e-4;
<a href="gcmc-syntax.htm#syntax_const" class="gcmc_func">const</a> VBEZIER_DEFAULT_MINL = 0.1mm;
</pre>
        The returned vectorlist does not include the (left-side) starting point
        <span class="gcmc_arg">b0</span>. However, the (right-side) end-point is
        included as the last point in the list.<br><br>
        Note: the left- and right-side terminology refers to the sequence of arguments,
        not the position in space.<br><br><div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="vbezier2">vbezier2</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b0</span>,
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b1</span>,
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b2</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">flatness = VBEZIER_DEFAULT_FLATNESS</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">minl = VBEZIER_DEFAULT_MINL</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">b0</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Left-side node of the curve</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">b1</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Control point</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">b2</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Right-side node of the curve</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">flatness</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Residual curve angle in interpolation (0&nbsp;&lt;&nbsp;<span class="gcmc_arg">flatness</span>&nbsp;&lt;&nbsp;2.0).</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">minl</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Minimum distance between points in the interpolation, must be larger than zero</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Returns the vectorization of a quadratic Bezier curve defined by points
            <span class="gcmc_arg">b0</span>,
            <span class="gcmc_arg">b1</span> and
            <span class="gcmc_arg">b2</span>.
            The quadratic form is internally converted into a cubic form and calls
            <a class="gcmc_func" href="#vbezier2">vbezier3</a>() for the actual
            calculation.  See <a class="gcmc_func" href="#vbezier2">vbezier3</a>() for
            details.
        </div>
        <hr class="gcmc_separator"><div class="gcmc_function">
            <span class="gcmc_type">vectorlist</span>
            <span class="gcmc_func" id="vbezier3">vbezier3</span>
            (
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b0</span>,
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b1</span>,
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b2</span>,
            <span class="gcmc_type">vector:</span><span class="gcmc_arg">b3</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">flatness = VBEZIER_DEFAULT_FLATNESS</span>,
            <span class="gcmc_type">scalar:</span><span class="gcmc_arg">minl = VBEZIER_DEFAULT_MINL</span>
            )
        </div>
        <table class="gcmc_args">
            <tbody>
                <tr>
                    <td class="gcmc_arg">b0</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Left-side node of the curve</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">b1</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Left-side control point</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">b2</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Right-side control point</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">b3</td>
                    <td class="gcmc_type">vector</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Right-side node of the curve</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">flatness</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[none]</td>
                    <td>Residual curve angle in interpolation (0&nbsp;&lt;&nbsp;<span class="gcmc_arg">flatness</span>&nbsp;&lt;&nbsp;2.0).</td>
                </tr>
                <tr>
                    <td class="gcmc_arg">minl</td>
                    <td class="gcmc_type">scalar</td>
                    <td class="gcmc_unit">[distance]</td>
                    <td>Minimum distance between points in the interpolation, must be larger than zero</td>
                </tr>
            </tbody>
        </table><div class="gcmc_description">
            Returns the vectorization of a cubic Bezier curve defined by points
            <span class="gcmc_arg">b0</span>,
            <span class="gcmc_arg">b1</span>,
            <span class="gcmc_arg">b2</span> and
            <span class="gcmc_arg">b3</span>.
            The returned vectorlist does <i>not</i> include the starting point
            <span class="gcmc_arg">b0</span> and includes the end point
            <span class="gcmc_arg">b3</span> as last in the list. The interpolation of the
            curve is calculated using De Casteljau's algorithm.<br><br>
            The intermediate points of the curve are placed according to two criteria. The
            <span class="gcmc_arg">minl</span> argument sets the smallest allowed distance
            between the points in the vectorlist. The
            <span class="gcmc_arg">flatness</span> argument is the sum of the maximum
            allowed residual angle between a flat inter-connect and the actual curve
            between the calculated points, as seen from both points towards each other,
            expressed as the cosines of the angles:<br><div class="gcmc_indent">2-|cos(left)+cos(right)|&nbsp;&lt;&nbsp;<span class="gcmc_arg">flatness</span></div>
            The test is only performed when the distance between the points is less than ten
            times <span class="gcmc_arg">minl</span> to ensure only small deviations. The
            default settings result in about a 10&nbsp;µm maximum perpendicular
            deviation from the curve. Reducing <span class="gcmc_arg">flatness</span> by a
            factor of ten with same <span class="gcmc_arg">minl</span> would result in an
            error of about 3&nbsp;µm, at the cost of more points.<br><br>
            Decreasing <span class="gcmc_arg">flatness</span> below 1.0e-9 results in a
            warning. The machine accuracy is double precision floating point and errors may
            accumulate to approximately sqrt(&lt;machine&nbsp;accuracy&gt;). Reducing
            <span class="gcmc_arg">flatness</span> beyond may cause unstable calculation.<br><br>
            Vectors <span class="gcmc_arg">b0</span>, <span class="gcmc_arg">b1</span>,
            <span class="gcmc_arg">b2</span> and <span class="gcmc_arg">b3</span> may be in
            2D (XY) space and in 3D (XYZ) vector space. The algorithm is transparent to the
            dimension and the returned vectorlist will be of same dimension as the input
            vectors. The limit is that <i>at least</i> X and Y coordinates must be
            specified. The caller may use other transformations on the returned vectorlist
            to place the curve anywhere in space afterwards.
        </div>
        <h4>Vectorized Bezier curve example</h4>
<pre class="gcmc_example"><a href="gcmc-syntax.htm#syntax_include" class="gcmc_func">include</a>("vbezier.inc.gcmc");

lp = [10.0mm, 0.0mm];		<span class="gcmc_comment">// Left node point</span>
rp = [20.0mm, 10.0mm];		<span class="gcmc_comment">// Right node point</span>
cpl = lp + [0.0mm, 10.0mm];	<span class="gcmc_comment">// Control point left</span>
cpr = rp + [5.0mm, -5.0mm];	<span class="gcmc_comment">// Control point left</span>

<span class="gcmc_comment">// Calculate the curve</span>
curve = <a href="#vbezier3" class="gcmc_func">vbezier3</a>(lp, cpl, cpr, rp);

<a href="gcmc-funcref.htm#goto" class="gcmc_func">goto</a>(lp);	<span class="gcmc_comment">// Start at starting point</span>
<a href="gcmc-funcref.htm#move" class="gcmc_func">move</a>(curve);	<span class="gcmc_comment">// Trace to the end</span>
</pre>
</body>
</html>