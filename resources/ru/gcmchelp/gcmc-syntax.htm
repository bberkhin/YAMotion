<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>GCMC - G-Code Meta Compiler syntaxis</title>
</head>
<body bgcolor="#8DEAFF">
    <h1>gcmc - G-Code Meta Compiler</h1>
    <p>  <a href="gcmc.htm">Back</a> </p>
    <h2>Syntax description</h2>
    <ul>
        <li><a href="#syntax_types">Types</a></li>
        <li><a href="#syntax_units">Units</a></li>
        <li>
            <a href="#syntax_operators">Operators</a>
            <ul>
                <li><a href="#syntax_op_intfloat">Integer vs. floating point</a></li>
                <li><a href="#syntax_op_epsilon">EPSILON calculation</a></li>
                <li><a href="#syntax_op_undef">Undef handling</a></li>
                <li><a href="#syntax_op_addsub">Add and subtract operators</a></li>
                <li><a href="#syntax_op_boollogic">Boolean logic and comparison operators</a></li>
                <li><a href="#syntax_op_boolbin">Binary Boolean operators</a></li>
                <li><a href="#syntax_op_index">Index [] operator</a></li>
                <li><a href="#syntax_op_field">Field . operator</a></li>
                <li><a href="#syntax_op_shifts">Shift operators</a></li>
                <li><a href="#syntax_op_ternary">Ternary operator</a></li>
                <li><a href="#syntax_op_dotp">Dot product</a></li>
                <li><a href="#syntax_op_string">String operations</a></li>
            </ul>
        </li>
        <li>
            <a href="#syntax_variables">Variables, statements and expressions</a>
            <ul>
                <li><a href="#syntax_const">Constants</a></li>
                <li><a href="#syntax_predefined">Predefined constants</a></li>
            </ul>
        </li>
        <li><a href="#syntax_statements">Statements</a></li>
        <li>
            <a href="#syntax_flowcontrol">Flow control</a>
            <ul>
                <li><a href="#syntax_if">if()/elif()/else</a></li>
                <li><a href="#syntax_foreach">foreach()</a></li>
                <li><a href="#syntax_for">for()</a></li>
                <li><a href="#syntax_while">while()</a></li>
                <li><a href="#syntax_dowhile">do/while()</a></li>
                <li><a href="#syntax_repeat">repeat()</a></li>
            </ul>
        </li>
        <li>
            <a href="#syntax_functions">Functions</a>
            <ul>
                <li><a href="#syntax_function_return">Function return</a></li>
                <li><a href="#syntax_function_passbyref">Function arguments by reference</a></li>
                <li><a href="#syntax_function_defaultarg">Default function arguments</a></li>
            </ul>
        </li>
        <li><a href="#syntax_include">Including files</a></li>
    </ul>
    Gcmc is a script language with late binding and lazy evaluation, meaning that
    run-time execution uncovers variable mismatches and all expressions are first
    known/converted to values when they are executed.<br><br>
    Comments are like C/C++, where <span class="gcmc_mono">/* */</span> indicate block
    comments and <span class="gcmc_mono">//</span> is a comment to end-of-line.

    <h3 id="syntax_types">Types</h3>
    <div class="gcmc_indent">
        Variables are typed with following available types:
        <table class="gcmc_indent">
            <tbody>
                <tr>
                    <td class="gcmc_tdtop"><i>undefined</i></td>
                    <td>An undefined quantity.</td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>integer</i></td>
                    <td>Any whole number positive or negative.</td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>floating&nbsp;point</i></td>
                    <td>Any number containing a decimal point. Floating point numbers less than |1e-12| are considered to be zero.</td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>scalar</i></td>
                    <td>Any integer or floating point type is considered to be scalar.</td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>vector</i></td>
                    <td>
                        A list of scalar values. Any coordinate in a vector may be undefined and
                        a vector may be empty. Vectors may be indexed to obtain the individual scalar
                        values. Examples:
                        <table><tbody><tr><td>[1, 2.0]</td><td>X is integer 1, Y is floating point 2.0</td></tr><tr><td>[-, -, -5.0]</td><td>X and Y are undefined, Z is floating point -5.0</td></tr></tbody></table>
                    </td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>vector-list</i></td>
                    <td>
                        A collection/list of vectors. Vector-lists may be empty. Vector-lists may be indexed
                        to obtain the individual vectors. Example: { [0, 0, 0], [-, 2, 3] }
                    </td>
                </tr>
                <tr>
                    <td class="gcmc_tdtop"><i>string</i></td>
                    <td>
                        A collection of UTF-8 source characters delimited by double quotes (").
                        Standard backslash escape sequences are supported, including octal and hex
                        escapes. Embedded nul-characters are not allowed.<br>
                        The internal representation of the characters is in Unicode (wchar_t). Beware
                        that Windows limits wchar_t to 2 bytes by default (U+0000...U+FFFF), whereas
                        most *nix versions will be able to represent full UCS-4
                        (U+00000000...U+7FFFFFFF). A warning is emitted in pedantic mode if the
                        representation exceeds the current Unicode defined map at U+10FFFF, or exceeds
                        the representation available for the machine/OS.<br>
                        Example:<br><pre class="gcmc_mono">"This is a string with \101scapes in \x44ifferent styles\n"</pre>
                    </td>
                </tr>
            </tbody>
        </table>
        Integer values may be entered in decimal (default) or hexadecimal format using
        "0x" prefix. I.e. 0x0a equals 10.
    </div>
    <h3 id="syntax_units">Units</h3>
    <div class="gcmc_indent">
        All scalar types can have units associated. Available units are:
        <table class="gcmc_indent"><tbody><tr><td><i>mm</i></td><td>Millimeters</td></tr><tr><td><i>in</i></td><td>Inch (25.4mm)</td></tr><tr><td><i>mil</i></td><td>Mil = 1/1000 inch (0.0254mm); always converted to inch</td></tr><tr><td><i>deg</i></td><td>Degrees, 360° full circle</td></tr><tr><td><i>rad</i></td><td>Radians, 2π full circle</td></tr><tr><td>&nbsp;</td><td>No units (none)</td></tr></tbody></table><br>
        Examples:
        <ul class="gcmc_example">
            <li>10.34mm</li>
            <li>200.7mil (becomes 0.2007in)</li>
            <li>1.125in</li>
            <li>5432</li>
            <li>60deg</li>
            <li>1.57079632679rad</li>
        </ul>
        Note that mils ("mil") are always converted to inch as soon as the value is
        parsed.<br><br>
        Calculations with units is implicit in the grammar. The resulting units are
        derived from the left-hand side of the expression, with the following rules
        (&lt;none&gt; indicates no unit):
        <table class="gcmc_indent"><tbody><tr><td>&lt;none&gt;</td><td>+-*/%</td><td>&lt;none&gt;</td><td>→ &lt;none&gt;</td></tr><tr><td>&lt;none&gt;</td><td>+-*/%</td><td>mm</td><td>→ mm</td></tr><tr><td>&lt;none&gt;</td><td>+-*/%</td><td>in</td><td>→ in</td></tr><tr><td>&lt;none&gt;</td><td>+-*/%</td><td>deg</td><td>→ deg</td></tr><tr><td>&lt;none&gt;</td><td>+-*/%</td><td>rad</td><td>→ rad</td></tr><tr><td>mm</td><td>+-*/%</td><td>&lt;none&gt;</td><td>→ mm</td></tr><tr><td>mm</td><td>+-*%</td><td>mm</td><td>→ mm</td></tr><tr><td>mm</td><td>/</td><td>mm</td><td>→ &lt;none&gt;</td></tr><tr><td>mm</td><td>+-*%</td><td>in</td><td>→ mm</td></tr><tr><td>mm</td><td>/</td><td>in</td><td>→ &lt;none&gt;</td></tr><tr><td>mm</td><td>+-*/%</td><td>deg</td><td>→ Warning [mm]</td></tr><tr><td>mm</td><td>+-*/%</td><td>rad</td><td>→ Warning [mm]</td></tr><tr><td>in</td><td>+-*/%</td><td>&lt;none&gt;</td><td>→ mm</td></tr><tr><td>in</td><td>+-*%</td><td>mm</td><td>→ in</td></tr><tr><td>in</td><td>/</td><td>mm</td><td>→ &lt;none&gt;</td></tr><tr><td>in</td><td>+-*%</td><td>in</td><td>→ in</td></tr><tr><td>in</td><td>/</td><td>in</td><td>→ &lt;none&gt;</td></tr><tr><td>in</td><td>+-*/%</td><td>deg</td><td>→ Warning [in]</td></tr><tr><td>in</td><td>+-*/%</td><td>rad</td><td>→ Warning [in]</td></tr><tr><td>deg</td><td>+-*/%</td><td>&lt;none&gt;</td><td>→ deg</td></tr><tr><td>deg</td><td>+-*/%</td><td>mm</td><td>→ Warning [deg]</td></tr><tr><td>deg</td><td>+-*/%</td><td>in</td><td>→ Warning [deg]</td></tr><tr><td>deg</td><td>+-*%</td><td>deg</td><td>→ deg</td></tr><tr><td>deg</td><td>/</td><td>deg</td><td>→ &lt;none&gt;</td></tr><tr><td>deg</td><td>+-*%</td><td>rad</td><td>→ deg</td></tr><tr><td>deg</td><td>/</td><td>rad</td><td>→ &lt;none&gt;</td></tr><tr><td>rad</td><td>+-*/%</td><td>&lt;none&gt;</td><td>→ rad</td></tr><tr><td>rad</td><td>+-*/%</td><td>mm</td><td>→ Warning [rad]</td></tr><tr><td>rad</td><td>+-*/%</td><td>in</td><td>→ Warning [rad]</td></tr><tr><td>rad</td><td>+-*%</td><td>deg</td><td>→ rad</td></tr><tr><td>rad</td><td>/</td><td>deg</td><td>→ &lt;none&gt;</td></tr><tr><td>rad</td><td>+-*%</td><td>rad</td><td>→ rad</td></tr><tr><td>rad</td><td>/</td><td>rad</td><td>→ &lt;none&gt;</td></tr></tbody></table><br>
        Only mm/in, in/mm, deg/rad and rad/deg conversions will affect the actual
        magnitude of the values on which the operation is performed. Examples:
        <table class="gcmc_indent gcmc_example"><tbody><tr><td>10mm + 200mm</td><td>→ 210mm</td><td></td></tr><tr><td>10mm + 200in</td><td>→ 5180.0mm</td><td>(converted to floating point)</td></tr><tr><td>10mm + 200mil</td><td>→ 15.08mm</td><td>(implicit floating point due to mil)</td></tr><tr><td>10mm + 200</td><td>→ 210mm</td><td></td></tr><tr><td>10 + 200</td><td>→ 210</td><td></td></tr><tr><td>10in + 200</td><td>→ 210in</td><td></td></tr><tr><td>10in + 200mm</td><td>→ 17.874015748in</td><td>(converted to floating point)</td></tr><tr><td>10in + 200in</td><td>→ 210in</td><td></td></tr><tr><td>10in + 200mil</td><td>→ 10.2in</td><td>(implicit floating point due to mil)</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>1deg + 1deg</td><td>→ 2deg</td><td></td></tr><tr><td>1deg + 1rad</td><td>→ 58.29577951deg</td><td>(converted to floating point)</td></tr><tr><td>1deg + 1</td><td>→ 2deg</td><td></td></tr><tr><td>1 + 1</td><td>→ 2</td><td></td></tr><tr><td>1rad + 1deg</td><td>→ 1.01745329rad</td><td>(converted to floating point)</td></tr><tr><td>1rad + 1rad</td><td>→ 2rad</td><td></td></tr><tr><td>1rad + 1</td><td>→ 2rad</td><td></td></tr></tbody></table><br>
        On output, all units are converted to millimeters or inches for axes XYZ and
        UVW (depending -i option). Axes ABC will have units converted to degrees. All
        values with no units associated are treated as if they were millimeters/degrees
        or inches/degrees as appropriate for the respective axis depending the -i
        option.<br><br><b>Important note</b>: Portable programs between imperial and metric mode
        <u>must</u> use units consistently. Omitting units on some values may cause
        calculations to be thrown off by a large factor due to implicit conversions of
        values with no units associated. <i>
            It is always good practice to use units
            consistently throughout the entire program
        </i>.
    </div>
    <h3 id="syntax_operators">Operators</h3>
    <div class="gcmc_indent">
        Calculations are performed with unary and binary operators with following precedence:
        <table class="gcmc_indent"><tbody><tr><td>Rank</td><td>Operator</td><td>Evaluation</td><td>Description</td></tr><tr><td>1</td><td class="gcmc_wsextra">()</td><td>left-to-right</td><td>parenthesis</td></tr><tr><td>2</td><td class="gcmc_wsextra">[] . expr++ expr--</td><td>left-to-right</td><td>vector/vector-list index, vector field, post-increment, post-decrement</td></tr><tr><td>3</td><td class="gcmc_wsextra">! ~ + - ++expr --expr</td><td>right-to-left</td><td>unary: logical not, binary not, plus, minus, pre-increment, pre-decrement</td></tr><tr><td>4</td><td class="gcmc_wsextra">* / %</td><td>left-to-right</td><td>multiplication, division, modulo</td></tr><tr><td>5</td><td class="gcmc_wsextra">+ - +| -|</td><td>left-to-right</td><td>binary plus, minus, plusor and minusor</td></tr><tr><td>6</td><td class="gcmc_wsextra">&lt;&lt; &gt;&gt;</td><td>left-to-right</td><td>shift left, shift right</td></tr><tr><td>7</td><td class="gcmc_wsextra">&gt; &lt; &gt;= &lt;=</td><td>left-to-right</td><td>comparison</td></tr><tr><td>8</td><td class="gcmc_wsextra">== !=</td><td>left-to-right</td><td>comparison</td></tr><tr><td>9</td><td class="gcmc_wsextra">&amp;</td><td>left-to-right</td><td>binary and</td></tr><tr><td>10</td><td class="gcmc_wsextra">^</td><td>left-to-right</td><td>binary xor</td></tr><tr><td>11</td><td class="gcmc_wsextra">|</td><td>left-to-right</td><td>binary or</td></tr><tr><td>12</td><td class="gcmc_wsextra">&amp;&amp;</td><td>left-to-right</td><td>logical and</td></tr><tr><td>13</td><td class="gcmc_wsextra">||</td><td>left-to-right</td><td>logical or</td></tr><tr><td>14</td><td class="gcmc_wsextra">?:</td><td>right-to-left</td><td>ternary/conditional expression</td></tr><tr><td>15</td><td class="gcmc_wsextra">= += -= +|= -|= *= /= %=<br>&lt;&lt;= &gt;&gt;= |= &amp;= ^=</td><td>right-to-left</td><td>assignment</td></tr></tbody></table><br>
        Valid operations and result:
        <table class="gcmc_indent"><tbody><tr><td>scalar</td><td>+</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>+</td><td>vector</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>+</td><td>vector</td><td>→</td><td>vectorlist</td></tr><tr><td>vectorlist</td><td>+</td><td>vectorlist</td><td>→</td><td>vectorlist (append)</td></tr><tr><td>string</td><td>+</td><td>scalar</td><td>→</td><td>string (printf scalar)</td></tr><tr><td>string</td><td>+</td><td>vector</td><td>→</td><td>string (printf vector)</td></tr><tr><td>string</td><td>+</td><td>vectorlist</td><td>→</td><td>string (printf vectorlist)</td></tr><tr><td>string</td><td>+</td><td>string</td><td>→</td><td>string (concat)</td></tr><tr><td>scalar</td><td>-</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>-</td><td>vector</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>-</td><td>vector</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>*</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>scalar</td><td>*</td><td>vector</td><td>→</td><td>vector</td></tr><tr><td>scalar</td><td>*</td><td>vectorlist</td><td>→</td><td>vectorlist</td></tr><tr><td>vector</td><td>*</td><td>scalar</td><td>→</td><td>vector</td></tr><tr><td>vector</td><td>*</td><td>vector</td><td>→</td><td>scalar (dot product)</td></tr><tr><td>vectorlist</td><td>*</td><td>scalar</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>/</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>/</td><td>scalar</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>/</td><td>scalar</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>%</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>%</td><td>scalar</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>%</td><td>scalar</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>&lt;&lt;</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>&lt;&lt;</td><td>scalar</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>&lt;&lt;</td><td>scalar</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>&gt;&gt;</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>&gt;&gt;</td><td>scalar</td><td>→</td><td>vector</td></tr><tr><td>vectorlist</td><td>&gt;&gt;</td><td>scalar</td><td>→</td><td>vectorlist</td></tr><tr><td>scalar</td><td>|</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>|</td><td>vector</td><td>→</td><td>vector (merge values on left-hand side)</td></tr><tr><td>scalar</td><td>&amp;</td><td>scalar</td><td>→</td><td>scalar</td></tr><tr><td>vector</td><td>&amp;</td><td>vector</td><td>→</td><td>vector (replace values on left-hand side)</td></tr><tr><td>scalar</td><td>^</td><td>scalar</td><td>→</td><td>scalar</td></tr></tbody></table>
        Operators +| and -| work the same as + and - with the exception of how undef
        values are handled. See below for details.

        <h4 id="syntax_op_intfloat">Integer vs. floating point</h4>
        <div class="gcmc_indent">
            Gcmc makes a distinction between integer and floating point values.
            Calculations performed on integers give integer result. Calculations on
            floating point or mixed integer/floating point gives floating point result.
            This behavior is regardless associated units unless unit-conversion is
            implied.<br><br>
            As a consequence, all operations with integers, including divisions, result in
            integers and are therefore implicitly rounded calculations. This can give rise
            to problems in a program if exact results are required. You should always use
            floating point values is you require exact results.
<pre class="gcmc_indent gcmc_example">1   / 10   → 0		<span class="gcmc_comment">// Integer result</span>
1.0 / 10   → 0.1
1   / 10.0 → 0.1
1.0 / 10.0 → 0.1

1mm   / 10 → 0mm	<span class="gcmc_comment">// Integer result</span>
1.0mm / 10 → 0.1mm

1mm + 1in  → 26.4mm	<span class="gcmc_comment">// Implicit conversion to floating point</span>
</pre>
        </div>
        <h4 id="syntax_op_epsilon">EPSILON calculation</h4>
        <div class="gcmc_indent">
            All floating point numbers are considered equal if they are within |1e-12| of
            each other. The value 1e-12 is called EPSILON and is used in all comparisons as
            well as (internal) conversions from floating point to integer. Limiting the
            precision of floating point has the advantage of allowing rounding errors to be
            disregarded more easily. This is especially important when calculating arcs,
            where otherwise small errors may cause the arc radius versus endpoint
            calculation to fail.
<pre class="gcmc_indent gcmc_example">a = 0;
(a + 1.0e-12) == a	<span class="gcmc_comment">// false</span>
(a + 0.9e-12) == a	<span class="gcmc_comment">// true</span>
</pre>
            The value 1e-12 allows for femto-meter accuracy and is four..five orders of
            magnitude better than the covalent bond-radius of atoms, which, for all
            practical purposes and intents, should be enough for a mill.<br><br>
            All implicit conversions from floating point to integer also use EPSILON
            calculation with the following rule:
            <i>n-EPSILON&nbsp;&lt;&nbsp;n&nbsp;&lt;&nbsp;n+EPSILON</i>. A warning is
            emitted if the value of <i>n</i> is outside the EPSILON range whenever implicit
            conversions takes place. Rounding on explicit conversion (using the to_int()
            function) will not generate a warning, but a value within EPSILON range of the
            nearest integer value will be converted to that nearest integer value.
<pre class="gcmc_indent gcmc_example">a = 1.0;
to_int(1.0 + 0.9e-12);	<span class="gcmc_comment">// 1 within EPSILON</span>
to_int(1.0 - 0.9e-12);	<span class="gcmc_comment">// 1 within EPSILON</span>
to_int(1.0 + 1.0e-12);	<span class="gcmc_comment">// 1 truncated</span>
to_int(1.0 - 1.0e-12);	<span class="gcmc_comment">// 0 truncated</span>
</pre>
        </div>
        <h4 id="syntax_op_undef">Undef handling</h4>
        <div class="gcmc_indent">
            Undefined values may be used in some calculations, resulting in a real value or
            undefined. Rules for calculating with undefined are:
            <table class="gcmc_indent"><tbody><tr><td>undef</td><td>+</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>+</td><td>x</td><td>→</td><td>undef</td></tr><tr><td>x</td><td>+</td><td>undef</td><td>→</td><td>x</td></tr><tr><td>undef</td><td>+|</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>+|</td><td>x</td><td>→</td><td>x (if x is scalar, else error)</td></tr><tr><td>x</td><td>+|</td><td>undef</td><td>→</td><td>x</td></tr><tr><td>undef</td><td>-</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>-</td><td>x</td><td>→</td><td>undef</td></tr><tr><td>x</td><td>-</td><td>undef</td><td>→</td><td>x</td></tr><tr><td>undef</td><td>-|</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>-|</td><td>x</td><td>→</td><td>-x (as 0-x)</td></tr><tr><td>x</td><td>-|</td><td>undef</td><td>→</td><td>x</td></tr><tr><td>undef</td><td>*</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>*</td><td>x</td><td>→</td><td>undef (if x is scalar, else error)</td></tr><tr><td>x</td><td>*</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>/</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>/</td><td>x</td><td>→</td><td>undef (if x is scalar, else error)</td></tr><tr><td>x</td><td>/</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>%</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>%</td><td>x</td><td>→</td><td>undef (if x is scalar, else error)</td></tr><tr><td>x</td><td>%</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>&lt;&lt;</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>&lt;&lt;</td><td>x</td><td>→</td><td>undef</td></tr><tr><td>x</td><td>&lt;&lt;</td><td>undef</td><td>→</td><td>x</td></tr><tr><td>undef</td><td>&gt;&gt;</td><td>undef</td><td>→</td><td>undef</td></tr><tr><td>undef</td><td>&gt;&gt;</td><td>x</td><td>→</td><td>undef</td></tr><tr><td>x</td><td>&gt;&gt;</td><td>undef</td><td>→</td><td>x</td></tr></tbody></table>
            The rules also apply to vector operations +, -, +| and -| where both values are
            vectors, or scalar multiplication/division of a vector/vector-list. Such cases
            will operate on the vector's coordinates using above rules.<br><br>
            You can assign a literal undef to a variable by using the following notations:
<pre class="gcmc_indent gcmc_example">undefvar = [-][0];
undefvar = <a class="gcmc_func" href="./gcmc-funcref.htm#undef">undef</a>();
</pre>
            The literal undef is actually a vector with one undefined coordinate from which
            you request the first entry, which happens to be undef.<br><br>
            Local variables in functions are undef when declared without an assignment.<br><br>
            Please note that the undef interpretation for +| and -| has consequences when
            translating vectors and vectorlists by a fixed offset. The calculated
            sum/difference is not undef preserving, which may cause unintended side-effects
            when subsequent function calls interpret undef values with special care.  For
            example, a move() or goto() with an undef coordinate omits the coordinate in
            its output entirely. Adding an offset to the vector may convert an undef to a
            value, which is then translated into movement, which may not be appropriate.
        </div>
        <h4 id="syntax_op_addsub">Add and subtract operators</h4>
        <div class="gcmc_indent">
            Addition and subtraction on scalars, vectors and vectorlists are handled as
            expected when operating on integer or floating point values. Care must be taken
            when handling undef values.<br><br>
            Gcmc version 1.5.0 has changed the + and - operator's behavior to be an
            <i>exclusive</i> add and subtract and introduced the operators +| and -| to be
            <i>inclusive</i> add and subtract. Inclusive add/subtract treats the left-hand
            side as zero if it is undef, whereas exclusive add/subtract treats operations
            on left-hand side undef values as undef result. The difference between the
            operator's functionality can be illustrated as follows:
            <table class="gcmc_indent gcmc_example"><tbody><tr><td colspan="6">Exclusive Add (+),<br>left-hand side undef is retained, right-hand side undef substituded by 0</td></tr><tr><td>[15, -, -2] + [-, 10]</td><td>    </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>+</td><td>[&nbsp;-,&nbsp;10]</td>          <td>           </td><td>+</td> <td>[&nbsp;0,&nbsp;10,&nbsp;&nbsp;0]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td></tr><tr><td colspan="6">&nbsp;</td></tr><tr><td colspan="6">Inclusive Add (+|),<br>both left- and right-hand side undef substituted by 0 </td></tr><tr><td>[15, -, -2] +| [-, 10]</td><td>    </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;0,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>+|</td><td>[&nbsp;-,&nbsp;10]</td>         <td>           </td><td>+|</td><td>[&nbsp;0,&nbsp;10,&nbsp;&nbsp;0]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;10,&nbsp;-2]</td>      <td>           </td><td>     </td><td>[15,&nbsp;10,&nbsp;-2]</td></tr><tr><td colspan="6">&nbsp;</td></tr><tr><td colspan="6">Exclusive Subtract (-),<br>left-hand side undef is retained, right-hand side undef substituded by 0</td></tr><tr><td>[15, -, -2] - [-, 10]</td><td>    </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>-</td><td>[&nbsp;-,&nbsp;10]</td>          <td>           </td><td>-</td> <td>[&nbsp;0,&nbsp;10,&nbsp;&nbsp;0]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td></tr><tr><td colspan="6">&nbsp;</td></tr><tr><td colspan="6">Inclusive Subtract (-|),<br>both left- and right-hand side undef substituted by 0 </td></tr><tr><td>[15, -, -2] -| [-, 10]</td><td>    </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>     </td><td>[15,&nbsp;&nbsp;&nbsp;0,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>-|</td><td>[&nbsp;-,&nbsp;&nbsp;10]</td>         <td>           </td><td>-|</td><td>[&nbsp;0,&nbsp;&nbsp;10,&nbsp;&nbsp;0]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;-10,&nbsp;-2]</td>     <td>           </td><td>     </td><td>[15,&nbsp;-10,&nbsp;-2]</td></tr></tbody></table><br>
            You should be aware that reversing the left-hand side and the right-hand side
            gives a different result:<br><div class="gcmc_indent">
                •&nbsp;The <u>exclusive add</u> operation <b>
                    is
                    <u>not</u> commutative
                </b> (<i>a+b</i> is not equal <i>b+a</i>) and is undef preserving.
            </div>
            <div class="gcmc_indent">
                •&nbsp;The <u>inclusive add</u> operation <b>
                    is
                    commutative
                </b> (<i>a+b</i> equals <i>b+a</i>) and is undef replacing.
            </div>
            The difference  is illustrated by following example and you should compare it
            to the example above:
            <table class="gcmc_indent gcmc_example"><tbody><tr><td colspan="6">Exclusive Add (+),<br>left-hand side undef is retained, right-hand side undef substituded by 0</td></tr><tr><td>[-, 10] + [15, -, -2]</td><td>    </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[&nbsp;-,&nbsp;10]</td>          <td>           </td><td>     </td><td>[&nbsp;-,&nbsp;10,&nbsp;&nbsp;-]</td></tr><tr class="gcmc_mono2"><td>      </td><td>+</td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>           </td><td>+</td> <td>[15,&nbsp;&nbsp;0,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[&nbsp;-,&nbsp;10,&nbsp;&nbsp;-]</td> <td>      </td><td>     </td><td>[&nbsp;-,&nbsp;10,&nbsp;&nbsp;-]</td></tr><tr><td colspan="6">&nbsp;</td></tr><tr><td colspan="6">Inclusive Add (+|),<br>both left- and right-hand side undef substituted by 0 </td></tr><tr><td>[-, 10] +| [15, -, -2]</td><td>   </td><td>is:</td>                         <td>→</td>  <td>     </td><td>or:</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[&nbsp;-,&nbsp;10]</td>          <td>           </td><td>     </td><td>[&nbsp;0,&nbsp;10,&nbsp;&nbsp;0]</td></tr><tr class="gcmc_mono2"><td>      </td><td>+|</td><td>[15,&nbsp;&nbsp;-,&nbsp;-2]</td> <td>          </td><td>+|</td><td>[15,&nbsp;&nbsp;0,&nbsp;-2]</td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td><hr></td>                      <td>→</td>  <td>     </td><td><hr></td></tr><tr class="gcmc_mono2"><td>      </td><td>    </td><td>[15,&nbsp;10,&nbsp;-2]</td>      <td>           </td><td>     </td><td>[15,&nbsp;10,&nbsp;-2]</td></tr></tbody></table>
        </div>
        <h4 id="syntax_op_boollogic">Boolean logic and comparison operators</h4>
        <div class="gcmc_indent">
            Boolean operations result in an integer value with no units of either 1 (true)
            or 0 (false). Boolean AND (&amp;&amp;) and OR (||) are evaluated using
            short-circuit evaluation. I.e. the right-hand side is not evaluated if the
            left-hand side of the expression pre-determines the outcome.
            <ul>
                <li>Any scalar value not zero (0) within |EPSILON| is considered to be true</li>
                <li>Undef values are considered to be false</li>
                <li>Vector are true if they contain at least one coordinate, regardless what the coordinate contains</li>
                <li>Vectorlists are true if they contain at least one vector, regardless what the vector contains</li>
                <li>String values are true if not empty and false if empty</li>
            </ul>
            Comparison operators operate on scalars, vectors and strings, with the
            limitation that vector comparison only supports == and !=. Scalar comparison
            tests the units of the scalars and emits a warning if a mismatch is detected.
            Strings are compared using case-sensitive comparison at Unicode character-level
            using the wcscmp() C-function.<br><br>
            Comparing vectors requires them to have the same number of entries. Comparing
            vectors with unequal number of entries results in a warning and the comparison
            result is always false. Each vector entry obeys the same unit rules as for
            scalars and warnings are emitted on mismatches. An undef vector entry is only
            equal to another undef entry.<br>
        </div>
        <h4 id="syntax_op_boolbin">Binary Boolean operators</h4>
        <div class="gcmc_indent">
            Binary operators '&amp;', '|', '^' and '~' on scalars only work on integers
            with no associated units. Floating point values are converted to integer and
            units are stripped when encountered. A warning is emitted if floating point
            values are used or units are encountered. An integer has at least 32 bit
            resolution, but may also be 64 bit wide. Therefore, the binary not (~) operator
            may differ depending platform. However, you can use one's (or two's) complement
            math to know the actual value.
<pre class="gcmc_indent gcmc_example">val = (1&lt;&lt;2) | (1&lt;&lt;4);	<span class="gcmc_comment">// val = 20 (0x14)</span>
val = 0x5a &amp; 0x0f;	<span class="gcmc_comment">// val = 10 (0x0a)</span>
val = ~1;		<span class="gcmc_comment">// val = -2 (= -(1) - 1)</span>
</pre>
            <br>
            Binary operators on vectors merge ('|') and replace ('&amp;') values from the
            right side vector into the left side vector. Merging values only occurs on
            entries that are undef on the left side and not undef on the right side.
            Replacing values occurs for all values where a non-undef value exists in both
            left and right side.
<pre class="gcmc_indent gcmc_example">[-, 2, 3] | [4, 5] → [4, 2, 3]	<span class="gcmc_comment">// Note: [4, 5] equals [4, 5, -] in this context</span>
[1, -, 3] | [4, 5] → [1, 5, 3]
[1, 2, -] | [4, 5] → [1, 2, -]
[-, 2, 3] &amp; [4, 5] → [-, 5, 3]
[1, -, 3] &amp; [4, 5] → [4, -, 3]
[1, 2, -] &amp; [4, 5] → [4, 5, -]
</pre>
        </div>
        <h4 id="syntax_op_index">Index [] operator</h4>
        <div class="gcmc_indent">
            Index operator [] works on both lvalue and rvalue. Index values must be scalar
            and should have no units associated.  Negative indices address the vector or
            vectorlist from the end. Stronger restrictions apply to lvalues than rvalues,
            where lvalues must address a variable. Both single and double indexing is
            supported. Double indexes can only be performed on vectorlists. Lvalue indices
            may address locations that are not yet assigned, whereas rvalue indices result
            in a warning if the index is out of bounds. Examples:
<pre class="gcmc_indent gcmc_example">vector = [1, 2, 3];
vector[2] = 6;			<span class="gcmc_comment">/* → [1, 2, 6] */</span>
vector[3] = vector[-1];		<span class="gcmc_comment">/* → [1, 2, 6, 6] */</span>
vector[7] = 2;			<span class="gcmc_comment">/* → [1, 2, 6, 6, -, -, -, 2] */</span>
vlist = {};
vlist[2] = [1, 2];		<span class="gcmc_comment">/* → { [], [], [1, 2] } */</span>
vlist[1][3] = 3.1415;		<span class="gcmc_comment">/* → { [], [-, -, -, 3.1415], [1, 2] } */</span>
<span class="gcmc_comment">/* Rvalue may be constant expression */</span>
myvec = {[1,2], [2,3]}[1];	<span class="gcmc_comment">/* → [2, 3] */</span>
myval = [1, 2, 3][1];		<span class="gcmc_comment">/* → 2 */</span>
</pre>
        </div>
        <h4 id="syntax_op_field">Field . operator</h4>
        <div class="gcmc_indent">
            All vectors may have the first nine entries addressed as fields for more
            natural readability. The field-names correspond with the axis-name for the
            entry in lower case letters (x, y, z, a, b, c, u, v, w).<br>
            Field addressing a vector is translated into an <a href="#syntax_op_index">index operation</a>,
            as explained above and follow the rules of indexing. Examples:
<pre class="gcmc_indent gcmc_example">vector = [1, 2, 3];
call_xy(vector.x, vector.y);	<span class="gcmc_comment">/* Same as call_xy(vector[0], vector[1]); */</span>
vector.z = 6;			<span class="gcmc_comment">/* → [1, 2, 6] */</span>
vector.a = vector[-1];		<span class="gcmc_comment">/* → [1, 2, 6, 6] */</span>
vector.v = 2;			<span class="gcmc_comment">/* → [1, 2, 6, 6, -, -, -, 2] */</span>
</pre>
        </div>
        <h4 id="syntax_op_shifts">Shift operators</h4>
        <div class="gcmc_indent">
            Shift operators &lt;&lt; and &gt;&gt; work as usual on scalars in which
            &lt;&lt; multiplies by 2 and &gt;&gt; divides by 2, without modifying
            associated units. Left shift on vectors and vectorlists will delete values from
            the start. Right shift on vectors adds undef values to the start and on
            vectorlists it will add empty vectors at the start. Shift operators always
            return the left-hand side type, including its units. The right-hand side should
            not have any units associated. Examples:
            <table class="gcmc_indent gcmc_example gcmc_mono2"><tbody><tr><td>1 &lt;&lt; 2</td><td>→</td><td>4</td></tr><tr><td>6 &gt;&gt; 1</td><td>→</td><td>3</td></tr><tr><td>[1, 2] &lt;&lt; 1</td><td>→</td><td>[2]</td></tr><tr><td>[1, 2] &gt;&gt; 2</td><td>→</td><td>[-, -, 1, 2]</td></tr><tr><td>{[1,2], [3,4]} &lt;&lt; 1</td><td>→</td><td>{[3,4]}</td></tr><tr><td>{[1,2], [3,4]} &gt;&gt; 1</td><td>→</td><td>{[], [1,2], [3,4]}</td></tr></tbody></table>
        </div>
        <h4 id="syntax_op_ternary">Ternary operator</h4>
        <div class="gcmc_indent">
            Ternary operator ?: for conditional expressions does not perform any checks on
            the return-type of the true- and false-clauses. This means that the expression
            may evaluate to different types depending the condition. This may or may not be
            useful, so you should beware when using ternary operators.
        </div>
        <h4 id="syntax_op_dotp">Dot product</h4>
        <div class="gcmc_indent">
            The dot product of two vectors will have units associated if either vector has
            any entry with distance units. The resulting units are set to millimeters or
            inches depending gcmc's operating mode (-i option). The dot product
            multiplication/sum sequence will perform conversion to the appropriate distance
            unit on the vector entries before multiplication is performed.<br><br><b>Beware</b>: the <u>magnitude</u> of the dot product <u>
                depends on the units
                selected
            </u>. Calculating a dot product with angular units will cause a
            warning to be emitted. If all vector entries are unit-less, then the result
            will also remain unit-less.<br>
            Running in metric mode:
<pre class="gcmc_indent gcmc_example">vnn = [2.0, 2.0];
vmm = [1.0mm, 2.0mm];
vin = [2.0in, 1.0in];
dotp = vnn * vnn;	<span class="gcmc_comment">//    8.00000000</span>
dotp = vnn * vmm;	<span class="gcmc_comment">//    6.00000000mm</span>
dotp = vnn * vin;	<span class="gcmc_comment">//  152.40000000mm</span>
dotp = vmm * vmm;	<span class="gcmc_comment">//    5.00000000mm</span>
dotp = vin * vin;	<span class="gcmc_comment">// 3225.80000000mm</span>
dotp = vmm * vin;	<span class="gcmc_comment">//  101.60000000mm</span>
dotp = vin * vmm;	<span class="gcmc_comment">//  101.60000000mm</span>
</pre>
            Running in imperial mode (-i command-line option):
<pre class="gcmc_indent gcmc_example">vnn = [2.0, 2.0];
vmm = [1.0mm, 2.0mm];
vin = [2.0in, 1.0in];
dotp = vnn * vnn;	<span class="gcmc_comment">// 8.00000000</span>
dotp = vnn * vmm;	<span class="gcmc_comment">// 2.15748031in</span>
dotp = vnn * vin;	<span class="gcmc_comment">// 6.00000000in</span>
dotp = vmm * vmm;	<span class="gcmc_comment">// 1.00620001in</span>
dotp = vin * vin;	<span class="gcmc_comment">// 5.00000000in</span>
dotp = vmm * vin;	<span class="gcmc_comment">// 2.07874016in</span>
dotp = vin * vmm;	<span class="gcmc_comment">// 2.07874016in</span>
</pre>
            Portable use of the dot product may pose a challenge if used carelessly and can
            result in unforeseen problems. Most uses of the dot product involve extracting
            the cos(φ) part (the angle between the vectors), in which case you will not
            have too many problems:
<pre class="gcmc_indent gcmc_example">vmm = [1.0mm, 2.0mm];
vin = [2.0in, 1.0in];
cosphi = (vmm * vin) / (length(vmm)*length(vin));	<span class="gcmc_comment">// CORRECT: 0.8 for both metric and imperial mode</span>
</pre>
            <b>Note</b>: The division by the length of both vectors is in parenthesis () to
            ensure that the result has no units. Two separate divisions would wrongly
            propagate the units from the second division to the result.<br><br>
            If vector coordinates with and without units are combined, then there will be a
            difference due to default conversions and a wrong result may be calculated:
<pre class="gcmc_indent gcmc_example">vmm = [1.0, 2.0mm];	<span class="gcmc_comment">// Note the lacking unit in first coordinate</span>
vin = [2.0in, 1.0in];
cosphi = (vmm * vin) / (length(vmm)*length(vin));	<span class="gcmc_comment">// WRONG: 0.8 for metric and 0.92677230 for imperial mode</span>
</pre>
            You can retrieve the cos(φ) value more easily by using normalized vectors.
            Normalizing the vectors eliminates the division. However, you should still
            ensure that the source vectors have units on all coordinates:
<pre class="gcmc_indent gcmc_example">vmm = <a class="gcmc_func2" href="./gcmc-funcref.htm#normalize">normalize</a>([1.0mm, 2.0mm]);	<span class="gcmc_comment">// vmm = [0.44721360, 0.89442719]</span>
vin = <a class="gcmc_func2" href="./gcmc-funcref.htm#normalize">normalize</a>([2.0in, 1.0in]);	<span class="gcmc_comment">// vin = [0.89442719, 0.44721360]</span>
cosphi = vmm * vin;	<span class="gcmc_comment">// CORRECT: 0.8 for both metric and imperial mode</span>
</pre>
        </div>
        <h4 id="syntax_op_string">String operations</h4>
        <div class="gcmc_indent">
            Strings can be added using the + operator to concatenate the strings.
            Conversion to string is performed if the right-hand side of the + operator is
            scalar, vector or vectorlist. Comparing strings uses a binary Unicode
            character-level compare, is case-sensitive and unaware of Unicode's internals
            or specific character sets.
<pre class="gcmc_indent gcmc_example">i = 1;
v = [1, 10mm, 2.0in];
str = "Hello" + " " + "World!";	<span class="gcmc_comment">// "Hello World!"</span>
str = "val=" + i;		<span class="gcmc_comment">// "val=1"</span>
str = "val=" + v;		<span class="gcmc_comment">// "val=[1,10mm,2.00000000in]"</span>
</pre>
        </div>
    </div>
    <h3 id="syntax_variables">Variables, statements and expressions</h3>
    <div class="gcmc_indent">
        A variable is any word starting with a letter or _ and followed by letters,
        numbers or _ that has not been reserved as a keyword. Variables can be assigned
        values in statements. Each statement is terminated with a semi-colon (;).<br>
        Reserved words are:
        <table class="gcmc_indent">
            <tbody>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">break</td>
                    <td>break any loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">const</td>
                    <td>declare variable as constants</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">continue</td>
                    <td>continue to start of loop</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">return</td>
                    <td>return from function</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">for</td>
                    <td>for loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">foreach</td>
                    <td>foreach loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">while</td>
                    <td>while loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">do</td>
                    <td>do/while loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">repeat</td>
                    <td>repeat loop construct</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">if</td>
                    <td>conditional</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">elif</td>
                    <td>else-if conditional</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">else</td>
                    <td>final conditional clause</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">function</td>
                    <td>function definition</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">local</td>
                    <td>local variable scope declarator</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">include</td>
                    <td>include other file</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">in</td>
                    <td>inch measurement modifier</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">mil</td>
                    <td>mil measurement modifier (0.001")</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">mm</td>
                    <td>millimeter measurement modifier</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">deg</td>
                    <td>degree measurement modifier</td>
                </tr>
                <tr>
                    <td>•</td>
                    <td class="gcmc_mono">rad</td>
                    <td>radians measurement modifier</td>
                </tr>
            </tbody>
        </table>
        All statements consist of an expression. An expression can be a constant, a
        variable or any combination with an operator. Assignments are also expressions,
        which allows cascade-able assignments, and are evaluated strictly
        right-to-left. Assignments have restrictions on the lvalue expression they can
        address while they accept any rvalue expression. Lvalues are variables and
        indexed variables. Rvalues may be any expression. Examples:
<pre class="gcmc_indent gcmc_example">var123 = [1, 2, 3, 4, 5];
<a class="gcmc_func2" href="./gcmc-funcref.htm#feedrate">feedrate</a>(125.77mm);
_xx  = 4.5mm;
yy   = 50mil;
vec  = [_xx, yy];
list = { vec, [_xx, yy], [1, 2, 3] };
a    = vec[0];   	<span class="gcmc_comment">/* a equals value of _xx (4.5mm) */</span>
b    = list[2];  	<span class="gcmc_comment">/* b equals [1,2,3] */</span>
val1 = val2 = val3 = 0;	<span class="gcmc_comment">/* cascaded assignment */</span>
</pre>
        <h4 id="syntax_const">Constants</h4>
        Variables may be declared as constant using the <span class="gcmc_mono">const</span>
        keyword. The declaration must include an assignment from an expression which
        results in a value.  Any subsequent assignment to constants is prohibited and
        results in a run-time error. Constants may be <a href="#syntax_function_passbyref">passed as reference</a>
        in function calls, but any assignment to the local reference will then be
        flagged as an error. Variables declared <span class="gcmc_mono">const</span>
        are local to the scope in which they are declared, just like variables declared
        using
        <span class="gcmc_mono">local</span> in functions.
<pre class="gcmc_indent gcmc_example"><span class="gcmc_func2">const</span> constinteger = 1234;	<span class="gcmc_comment">/* Arbitrary constants */</span>
<span class="gcmc_func2">const</span> constfloat   = 5.678;
<span class="gcmc_func2">const</span> constvector  = [1, -, 2];
<span class="gcmc_func2">const</span> constlist    = {[1], [2]}

constinteger = 7890;	<span class="gcmc_comment">/* Error: cannot (re-)assign to constants */</span>

<span class="gcmc_comment">/* Multiple declaration may be combined with comma as separator */</span>
<span class="gcmc_func2">const</span> FLAG_UP   = 0x01, FLAG_DOWN  = 0x02;	<span class="gcmc_comment">/* Flags as constants */</span>
<span class="gcmc_func2">const</span> FLAG_LEFT = 0x04, FLAG_RIGHT = 0x08;
</pre>
        <h4 id="syntax_predefined">Predefined constants</h4>
        <div class="gcmc_indent">
            Gcmc defines a set of constants before any command-line defines are parsed and
            before the script is executed. The constants are useful for making calls to
            functions more readable. The <a href="./gcmc-funcref">function reference</a>
            states the names of the constants in the description of the arguments.<br><br>
            The following table shows all other constants currently defined by gcmc:
            <table class="gcmc_indent">
                <tbody>
                    <tr>
                        <td>•</td>
                        <td class="gcmc_mono">GCMC_VERSION_STR</td>
                        <td class="gcmc_type">string</td>
                        <td>Complete version number with dots</td>
                    </tr>
                    <tr>
                        <td>•</td>
                        <td class="gcmc_mono">GCMC_VERSION</td>
                        <td class="gcmc_type">integer</td>
                        <td>Complete version number calculated as "(major * 1000 + minor) * 1000 + point"</td>
                    </tr>
                    <tr>
                        <td>•</td>
                        <td class="gcmc_mono">GCMC_VERSION_MAJOR</td>
                        <td class="gcmc_type">integer</td>
                        <td>Version number major part</td>
                    </tr>
                    <tr>
                        <td>•</td>
                        <td class="gcmc_mono">GCMC_VERSION_MINOR</td>
                        <td class="gcmc_type">integer</td>
                        <td>Version number minor part</td>
                    </tr>
                    <tr>
                        <td>•</td>
                        <td class="gcmc_mono">GCMC_VERSION_POINT</td>
                        <td class="gcmc_type">integer</td>
                        <td>Version number point release</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <h3 id="syntax_flowcontrol">Flow control</h3>
    <div class="gcmc_indent">
        Program flow is controlled by standard conditional and loop control statements:
        <ul class="gcmc_mono">
            <li>if(cond) { ... }</li>
            <li>if(cond) { ... } elif(cond) { ... } [elif*]</li>
            <li>if(cond) { ... } else { ... }</li>
            <li>if(cond) { ... } elif(cond) {} [elif*] else { ... }</li>
            <li>foreach(list; ident) { ... }</li>
            <li>for(stmt; cond; stmt) { ... }</li>
            <li>while(cond) { ... }</li>
            <li>do { ... } while(cond);</li>
            <li>repeat(scalar) { ... }</li>
            <li>repeat(scalar; ident) { ... }</li>
            <li>return expr;</li>
            <li>return;</li>
            <li>break;</li>
            <li>continue;</li>
        </ul>
        The curly braces are mandatory and part of the control statement.<br><br>
        The <span class="gcmc_mono">continue</span> statement short-circuits the loop
        and immediately jumps to the loop start. Continue in for() loops will execute
        the increment part of the loop prior to testing the condition. Loops may be
        broken by <span class="gcmc_mono">return</span> and <span class="gcmc_mono">break</span>
        statements. A <span class="gcmc_mono">return</span> without value/expr returns
        a variable that will return true on test isundef(). See functions below.

        <h4 id="syntax_if">if()/elif()/else</h4>
        <div class="gcmc_indent">
            Conditionals start with an if() clause and may include as many elif() clauses
            as you need. Optionally they may end with an else clause. The arguments to if()
            and elif() are evaluated to boolean expressions. Examples:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">if</span>(!<a class="gcmc_func2" href="./gcmc-funcref.htm#isvector">isvector</a>(val)) {
            <a class="gcmc_func2" href="./gcmc-funcref.htm#error">error</a>("val should be a vector");
            <span class="gcmc_func2">return</span>;
}

<span class="gcmc_func2">if</span>(value &gt;= 43) {
            <span class="gcmc_comment">/* bla */</span>
} <span class="gcmc_func2">elif</span>(value &lt; 0) {
            <span class="gcmc_comment">/* Negative bla */</span>
} <span class="gcmc_func2">elif</span>(value == 5) {
            <span class="gcmc_comment">/* the right bla */</span>
} <span class="gcmc_func2">else</span> {
            <span class="gcmc_comment">/* None of the above bla */</span>
}
</pre>
        </div>
        <h4 id="syntax_foreach">foreach()</h4>
        <div class="gcmc_indent">
            The foreach() construct expects two semi-colon separated arguments where the
            first is a vector or vector-list type and the second an identifier
            (loop-variable). The identifier is assigned a <i>copy</i> of each vector from
            the vector-list, or scalar from the vector, before executing the loop content.
            The loop-variable may contain en empty vector or undef if the source
            vector-list or source vector contains them. Example:
<pre class="gcmc_example gcmc_indent">list = { [0, 0], [1, 0], [1, 1], [0, 1] };
<span class="gcmc_func2">foreach</span>(list; v) {
            <a class="gcmc_func2" href="./gcmc-funcref.htm#move">move</a>(v);
}
<span class="gcmc_func2">foreach</span>([1, 7, 3, 6, 4, 3, 1, 9, 0, 6, 4]; i) {
	complex_sequenced_func(i);
}
</pre>
        </div>
        <h4 id="syntax_for">for()</h4>
        <div class="gcmc_indent">
            The for() construct expects three semi-colon separated arguments where the fist
            indicates the initialization, the second is the loop condition and the third
            argument an increment statement. Both the initialization and the increment
            statement may be omitted, in which the for() behaves exactly like a while()
            loop. Example:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">for</span>(i = 0; i &lt; 10; i++) {
	do_something(i);
}
</pre>
        </div>
        <h4 id="syntax_while">while()</h4>
        <div class="gcmc_indent">
            The while() construct expects one arguments that functions as the loop
            condition. The loop repeats for as long as the condition evaluates to true.
            Example:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">while</span>(complex_algo_check()) {
	complex_algo_update(arg1, arg2);
}
</pre>
        </div>
        <h4 id="syntax_dowhile">do/while()</h4>
        <div class="gcmc_indent">
            The do/while() construct expects one arguments that functions as the loop
            condition. The loop repeats for as long as the condition evaluates to true and
            executes <i>at least</i> once. The while() clause must be terminated with a
            semicolon. Example:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">do</span> {
	res = complex_algo_update(arg1, arg2);
} <span class="gcmc_func2">while</span>(res &gt; limit);
</pre>
        </div>
        <h4 id="syntax_repeat">repeat()</h4>
        <div class="gcmc_indent">
            The <span class="">repeat</span> construct is a simple loop that
            repeats the loop a number of times indicated by the first argument, which must
            result in an integer scalar value. Both positive and negative repeats are
            allowed. The number of loops in a repeat is the absolute value of the scalar.
            An optional second argument to repeat exposes the loop-variable, which will
            count 1, 2, 3,... for positive repeats and -1, -2, -3,...  for negative
            repeats.<br>
            Repeat loops should specify a scalar of integer value and no units associated.
            NOTE: A floating point scalar to indicate the number of loops is bound to
            EPSILON calculation and is considered to be of integer value when the nearest
            integer is within EPSILON. I.e. a loop count will be <i>n</i> for all values
            <i>n-EPSILON&nbsp;&lt;&nbsp;n&nbsp;&lt;&nbsp;n+EPSILON</i>. A warning will be
            issued outside this range and the scalar will be truncated. Example:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">repeat</span>(5) {
            <a class="gcmc_func2" href="./gcmc-funcref.htm#move_r">move_r</a>([-, 1]);		<span class="gcmc_comment">/* Incremental move in Y 5 times */</span>
            <a class="gcmc_func2" href="./gcmc-funcref.htm#dwell">dwell</a>(0.5);		<span class="gcmc_comment">/* And wait 0.5s before continuing */</span>
}

<span class="gcmc_func2">repeat</span>(10; i) {
            <a class="gcmc_func2" href="./gcmc-funcref.htm#move">move</a>([val * i / 10.0]);
	...
}
</pre>
        </div>
    </div>
    <h3 id="syntax_functions">Functions</h3>
    <div class="gcmc_indent">
        Functions can be defined anywhere in the source. They have the following format:
        <div class="gcmc_indent gcmc_mono">function name(optargs) { ... }</div>
        Any defined variables in functions are local by default unless a global
        variable of same name already exists. Variables can be forced to be in the
        local scope when declared as local before use. Explicitly declared local
        variables will hide the global counterpart if it exists.<br><br>
        The <span class="gcmc_mono">local</span> keyword allows for multiple variables
        to be declared local in a comma separated list. Each local declaration may
        additionally have an assignment.
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">function</span> blabla() {
        <span class="gcmc_func2">local</span> foo, bar;
        <span class="gcmc_func2">local</span> var = 123, val = 0;
	...
        <span class="gcmc_func2">const</span> localconstant = 999;
}
</pre>
        Variables declared constant inside a function are also entered into the local
        scope and will cease to exist after the function returns.

        <h4 id="syntax_function_return">Function return</h4>
        Functions may return a value using the <span class="gcmc_mono">return</span>
        statement. The function will terminate immediately when a return is executed. A
        return without argument effectively returns an &lt;undef&gt; value. Trying to
        assigns a value from a function that did not use a return statement to exit the
        function results in a runtime error.
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">function</span> one()
{
        <span class="gcmc_func2">return</span> 1;
}

<span class="gcmc_func2">function</span> nothing()
{
        <span class="gcmc_func2">return</span>;
}

<a class="gcmc_func2" href="./gcmc-funcref.htm#message">message</a>("one(): ", one());		<span class="gcmc_comment">// Prints "one(): 1"</span>
<a class="gcmc_func2" href="./gcmc-funcref.htm#message">message</a>("nothing(): ", nothing());	<span class="gcmc_comment">// Prints "nothing(): &lt;undef&gt;"</span>
</pre>
        <h4 id="syntax_function_passbyref">Function arguments by reference</h4>
        All arguments passed to functions are passed by value by default. Passing by
        reference is possible when the function definition marks the appropriate
        parameter with an ampersand (&amp;). Example:
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">function</span> func(valval, &amp;valref)
{
	valref *= 10;
	valval *= 10;
}

i = 1;
j = 1;
func(i, j);
<a class="gcmc_func2" href="./gcmc-funcref.htm#message">message</a>("i=", i, ", j=", j);	<span class="gcmc_comment">// Should print "i=1, j=10"</span>
</pre>
        It should be noted that passing large vectorlists as values is slower than
        passing them by reference. If you use (very) large vectorlists with many
        (large) vectors, then passing them by reference may speed up your application.
        The definition of "large vectorlists" is somewhat arbitrary, but you should
        consider it when you have 50..100 vectors in a list being passed in deeply
        nested function calls.

        <h4 id="syntax_function_defaultarg">Default function arguments</h4>
        Function arguments may be setup with default values. All following arguments in
        the definition of a function must include default values once an argument has
        been assigned a default value. The default may be an arbitrary expression.
<pre class="gcmc_example gcmc_indent"><span class="gcmc_func2">function</span> defargfunc(arg, defarg1 = 123, defarg2 = [1, <a class="gcmc_func2" href="./gcmc-funcref.htm#sin">sin</a>(45.0deg)])
{
        <a class="gcmc_func2" href="./gcmc-funcref.htm#comment">comment</a>(arg, " ", defarg1, " ", defarg2);
}

defargfunc(1, 2, 3);	<span class="gcmc_comment">/* Prints (1 2 3) */</span>
defargfunc(1, 2);	<span class="gcmc_comment">/* Prints (1 2 [1,0.70710678]) */</span>
defargfunc(1);		<span class="gcmc_comment">/* Prints (1 123 [1,0.70710678]) */</span>
</pre>
        Using default arguments does not check the type of the argument in the call. In
        other words, the type of the argument may change depending whether or not the
        argument was passed in the call or not. You can query the actual type using
        the <a class="gcmc_func2" href="./gcmc-funcref.htm#isfloat">is*</a>() functions.
        <br><br>
        A slightly more useful example:
<pre class="gcmc_example gcmc_indent">SAFEZ = [-, -, 10.0];
CUTZ = [-, -, -5.0];
HOME  = [0, 0];

<span class="gcmc_func2">function</span> do_stuff(vecs)
{
        <span class="gcmc_func2">local</span> v;		<span class="gcmc_comment">/* Forces v to be local */</span>
        <a class="gcmc_func2" href="./gcmc-funcref.htm#goto">goto</a>(vecs[-1]);		<span class="gcmc_comment">/* Goto the last point */</span>
        <a class="gcmc_func2" href="./gcmc-funcref.htm#move">move</a>(CUTZ);		<span class="gcmc_comment">/* Move to cutting depth */</span>
        <span class="gcmc_func2">foreach</span>(vecs; v) {	<span class="gcmc_comment">/* Iterate over the corners */</span>
        <a class="gcmc_func2" href="./gcmc-funcref.htm#move">move</a>(v);
	}
        <a class="gcmc_func2" href="./gcmc-funcref.htm#goto">goto</a>(SAFEZ);		<span class="gcmc_comment">/* Retract */</span>
}

list  = { [0,0], [1,0], [1,1], [0,1] };
do_stuff(list);
<a class="gcmc_func2" href="./gcmc-funcref.htm#goto">goto</a>(HOME);</pre>
    </div>
    <h3 id="syntax_include">Including files</h3>
    <div class="gcmc_indent">
        A script can include other files using the <span class="gcmc_mono">include()</span>
        function. The files are searched along a search path added with one or more
        <span class="gcmc_mono">-I</span> options on the command-line. Gcmc always adds the
        current directory to the search path as last entry.<br>
        Example:
<pre class="gcmc_indent gcmc_example"><span class="gcmc_func2">include</span>("other-file.gcmc")
</pre>
    
    <div class="_gis-font-loader"></div>
</body>
</html>