//The endpoint vector and each vector in vectorlist points may consist of up to nine coordinates and are interpreted for axis XYZABCUVW respectively. Coordinates for axes XYZ and UVW are interpreted with distance units and axes ABC are interpreted with angular units. The absolute position before the movement is returne
goto=vector goto(vector:endpoint );
vector goto( vectorlist:points )
endpoint: Endpoint of the rapid
points:  vectorlist Points to visit using rapids
Rapid move (G0) to position endpoint, or all position in vectorlist points. 
The endpoint/points position is an absolute position.
goto_r=vector goto_r ( vector:endpoint )
vector goto_r ( vectorlist:points )
endpoint: Endpoint of the rapid
points:  vectorlist Points to visit using rapids
Rapid move (G0) to position endpoint, or all position in vectorlist points. The endpoint/points position is a relative position.
move=vector move (vector:endpoint [,scalar:rate])|Feed move (G1) to position endpoint, or all position in vectorlist points.| The endpoint/points position is an absolute position for move()|and a relative position for move_r()
move_r=vector move_r(vector:endpoint [,scalar:rate])|Feed move (G1) to position endpoint, or all position in vectorlist points.| The endpoint/points position is an absolute position for move()|and a relative position for move_r()
abs= scalar abs ( scalar:val )|Return the absolute value of val. Units are preserved.
acos=float acos ( scalar:val )|val scalar [no unit] A number from -1.0 to 1.0.|Return the arc-cosine of val in radians.
asin=float asin ( scalar:val )|val scalar [no unit] A number from -1.0 to 1.0.|Return the arc-sine of val in radians.
atan=float atan ( scalar:y, scalar:x )|y scalar	[distance]	Any number.|x	scalar	[distance]	Any number.|Return the arc-tangent of y/x in radians.
atan_xy=float atan_xy ( vector:v )| v vector [distance]	Any vector with both X and Y coordinates.|Return the arc-tangent of v.y/v.x in radians.
atan_xz=float atan_xz ( vector:v )| v vector [distance]	Any vector with both X and Z coordinates.|Return the arc-tangent of v.z/v.x in radians.
atan_yz=float atan_yz ( vector:v )| v vector [distance]	Any vector with both Y and Z coordinates.|Return the arc-tangent of v.z/v.y in radians.
ceil=float ceil ( scalar:val )|Return the smallest integral number not smaller than val. Units are preserved. Examples:
comment=undef comment ( ... ) ... Any type of argument|Outputs all arguments as a G-code comment into the output.|The comment() function will prepend a '(' and append a ')' including newline automatically.
cos=float cos ( scalar:angle )|Return the cosine of angle. The returned value has no units associated.
count=integer count ( vector:arg )|integer count ( vectorlist:arg )|integer count ( string:arg )|Returns number of coordinates or the number of vectors|Returns the number of bytes if arg is s string.
delete=vector delete ( vector:arg, scalar:idx )
vector delete ( vector:arg, scalar:idx, scalar:cnt )
vectorlist delete ( vectorlist:arg, scalar:idx )
vectorlist delete ( vectorlist:arg, scalar:idx, scalar:cnt )
string delete ( string:arg, scalar:idx )
string delete ( string:arg, scalar:idx, scalar:cnt )
arg	vector Vector coordinates from which to remove coordinates.
arg	vectorlist Vectorlist from which to remove vectors.
arg	string String from which to remove characters.
idx	scalar	[no unit]	Index which entry to remove; valid range [-count(arg)...count(arg)-1].
cnt	scalar	[no unit]	Number of entries to remove and must be ≥0 and defaults to 1 is not specified.
Returns arg with the entry idx removed from the vector, vectorlist or string. 
The second form removes cnt entries. Argument idx may be positive to remove at the position counting
from the start, or negative to start counting from the end (with -1 being the last entry of 
the vector/vectorlist/string). Argument cnt must be larger or equal to zero.
error=undef error ( ... )
...	Any type of argument
Outputs all arguments as text to the console.
Origin file and line number is prepended and a newline is appended if none in the last argument.
The gcmc executable will return non-zero if error() is executed.
exp=float exp ( scalar:val )
val	scalar Any number.
Return the exponentiation of val with base e.
The returned value has no units associated.
fixpos_restore=undef fixpos_restore ( scalar:g28g30 )
undef fixpos_restore ( scalar:g28g30, vector:rapid )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
rapid vector Rapid before restoring predefined position
Emit a G28 or G30 gcode (goto predefined position). If g28g30 evaluates to false then G28 is used, otherwise G30. 
The argument rapid defines a rapid move in absolute coordinates to perform before the rapid move to the indicated
stored position is performed. A warning is emitted if the position was never stored using fixpos_store or 
set using fixpos_set before restored and gcmc is internally tracked position is set to [0, 0, 0, 0, 0, 0, 0, 0, 0].
fixpos_set=undef fixpos_set ( scalar:g28g30, vector:pos )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
pos vector Absolute position to set at stored entry
Set the position pos for use in use in G28 and G30. 
If g28g30 evaluates to false then G28 position is set, otherwise G30 position is set.
This function is an administrative function to allow fixpos_restore() 
to be called without emitting a warning. The G28/G30 positions are often machine 
dependent variables and gcmc has no means of knowing them unless set explicitly.
fixpos_store=undef fixpos_store ( scalar:g28g30 )
g28g30 scalar [none] Boolean to indicate which position storage to retrieve
Emit a G28.1 or G30.1 gcode (store current absolute position). If g28g30 evaluates to false then G28.1 is used, otherwise G30.1.
floor=
head=
insert=
isangle=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise.
isconst=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isdefined=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isdeg=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise.
isdistance=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise.
isfloat=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isinch=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isint=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
ismm=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise.
ismodemm=Returns an integer (boolean) which is true (1)|if gcmc is run in millimeter mode and false (0) if run in inch mode (option -i/--imperial).
isnone=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise. 
israd=Return an integer (boolean) which is true (1)|if arg has the tested units and false (0) otherwise.
isrelative=Returns an integer (boolean) which is true (1)|if the output is set to relative mode (-r option) and false (0) otherwise.
isscalar=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isstring=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isundef=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isvector=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isvectorlist=These functions return an integer (boolean) which is true (1)|if arg is of tested type and false (0) otherwise.
isdxf=These function return an integer (boolean) which is true (1)|if the current output format is set as queried and false (0) otherwise.
issvg=These function return an integer (boolean) which is true (1)|if the current output format is set as queried and false (0) otherwise.
isgcode=These function return an integer (boolean) which is true (1)|if the current output format is set as queried and false (0) otherwise.
layer 
layerstack 
length 
literal 
log10 
log2 
loge 
message 
normalize 
pause=undef pause ( )
undef pause ( scalar:optionalstop )
optionalstop scalar [none] Boolean to indicate optional/forced program pause
Emit an M0 gcode (forced pause) if optionalstop evaluates to false or is not specified. 
Otherwise, emit an M1 gcode (optional pause) if optionalstop evaluates to true.
pi=
plane=
position=
pow 
relocate 
reverse 
rootate_xy 
rootate_xz 
rootate_yz 
round 
scale 
sign 
sin 
sqrt 
svg_closepath 
tail 
tan 
to_chr=string to_chr ( integer:arg )
Returns arg converted to a string with one Unicode character with the value of arg.
to_deg 
to_distance 
to_float=float to_float ( scalar:arg )
vector to_float ( vector:arg )
vectorlist to_float ( vectorlist:arg )
float to_float ( string:arg )
Convert arg to floating point. Vectors and vectorlists are iterated over all scalars contained in them and return vector or vectorlist. 
Undef is returned as undef and units are preserved.
to_in=
to_inch=
to_int=integer to_int ( scalar:arg )
vector to_int ( vector:arg )
vectorlist to_int ( vectorlist:arg )
integer to_int ( string:arg )
integer to_int ( string:arg, integer:base )
Convert arg to integer
to_mm=
to_native=
to_none=
to_rad=
to_string=Returns arg and any additional arguments converted and concatenated to a string. 
to_val=integer to_val ( string:arg )
Returns the first Unicode character of arg converted to an integer value without units.
Any additional characters in the argument are ignored. Zero is returned if the string is empty.
typeset 
undef 
warning
arc_ccw=
vector arc_ccw ( vector:endpoint, scalar:radius )
vector arc_ccw ( vector:endpoint, scalar:radius, scalar:turns )
endpoint vector [distance] Endpoint coordinate of the arc.
radius scalar [angular] Radius of the arc. Radius must not be zero.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_ccw_r=
vector arc_ccw_r ( vector:endpoint, scalar:radius )
vector arc_ccw_r ( vector:endpoint, scalar:radius, scalar:turns )
endpoint vector [distance] Endpoint coordinate of the arc.
radius scalar [angular] Radius of the arc. Radius must not be zero.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_cw=
vector arc_cw ( vector:endpoint, scalar:radius )
vector arc_cw ( vector:endpoint, scalar:radius, scalar:turns )
endpoint vector [distance] Endpoint coordinate of the arc.
radius scalar [angular] Radius of the arc. Radius must not be zero.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.
arc_cw_r=
vector arc_cw_r ( vector:endpoint, scalar:radius )
vector arc_cw_r ( vector:endpoint, scalar:radius, scalar:turns )
endpoint vector [distance] Endpoint coordinate of the arc.
radius scalar [angular] Radius of the arc. Radius must not be zero.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a counter clockwise (ccw) or clockwise (cw) arc from the current position to endpoint with radius radius.
The arc will be shortest angular movement with positive radius and largest angular movement with negative radius. 
Optional turns sets the number of turns to perform. Functions arc_ccw_r() and arc_cw_r() use relative addressing. 
The argument endpoint returned.

circle_ccw=undef circle_ccw ( vector:centerpoint )
undef circle_ccw ( vector:centerpoint, scalar:turns )
undef circle_ccw ( scalar:radius, scalar:angle )
centerpoint vector [distance] Coordinate of the center of the circle.
radius scalar[distance] Radius of the circle.
angle scalar [angular] Angle of the vector from the current point to the center of the circle.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.

circle_ccw_r=
undef circle_ccw_r ( vector:centerpoint )
undef circle_ccw_r ( vector:centerpoint, scalar:turns )
centerpoint vector [distance] Coordinate of the center of the circle.
radius scalar[distance] Radius of the circle.
angle scalar [angular] Angle of the vector from the current point to the center of the circle.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.

circle_cw=
undef circle_cw ( vector:centerpoint )
undef circle_cw ( vector:centerpoint, scalar:turns )
undef circle_cw ( scalar:radius, scalar:angle, scalar:turns )
centerpoint vector [distance] Coordinate of the center of the circle.
radius scalar[distance] Radius of the circle.
angle scalar [angular] Angle of the vector from the current point to the center of the circle.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.

circle_cw_r=
undef circle_cw_r ( vector:centerpoint )
undef circle_cw_r ( vector:centerpoint, scalar:turns )
centerpoint vector [distance] Coordinate of the center of the circle.
radius scalar[distance] Radius of the circle.
angle scalar [angular] Angle of the vector from the current point to the center of the circle.
turns scalar [no units] Number of turns to perform. Turns should be integer and must be larger than zero.
Perform a clockwise (cw) or counter clockwise (ccw) circle with radius length(centerpoint) 
for the circle_cw_r and circle_ccw_r functions and radius length(centerpoint-position()) 
for the circle_cw and circle_ccw functions and where centerpoint is the center point or the circle. 
Optional turns sets the number of turns to perform. The specified centerpoint is a relative 
position for the circle_cw_r and circle_ccw_r functions and an absolute coordinate for circle_cw and circle_ccw. 
The non-active plane coordinate may be used to create a helical movement.
The scalar form performs a clockwise (cw) or counter clockwise (ccw) circle with radius radius. 
The center point is located at a vector calculated from the current position of length radius and angled at angle. 
Optional turns sets the number of turns to perform. The circle is always performed within the active plane.



coolant=
drill=
dwell=
feedmode=
feedrate=
pathmode=undef pathmode ( scalar:exact )
undef pathmode ( scalar:pathtol, scalar:colintol )
exact scalar [none] Boolean to indicate pathmode exact (true) or blend (false)
pathtol scalar [distance] Maximum path tolerance for any given path. Must be ≥0.0
colintol scalar [distance] Co-linearity tolerance to join paths. Must be ≥0.0
The single argument form emits a G61 (exact path mode) gcode when exact is true 
and a G64 gcode (best possible speed) when exact is false.
The dual argument form emits a G64 with path tolerance (P-parameter) set to pathtol and 
the co-linearity tolerance (Q-parameter) to colintol. 
If you only intent to use/set the path tolerance, then you should set colintol to <undef> to suppress 
the Q-parameter or set both pathtol and colintol to the same value.
plane=integer plane ( scalar:mode )
integer plane ( string:mode )
mode scalar [no units]	Active cutting plane (see below).
mode string Active cutting plane (see below). Mode is case-insensitive.
Set the current operational plane to mode or return the current active plane. 
Argument mode may be one of the following:
  scalar (value) string Description
     PLANE_QUERY (undef) return current plane as integer
     PLANE_XY (0) "XY" set XY plane and return previous value (G17)
     PLANE_XZ (1) "XZ" set XZ plane and return previous value (G18)
     PLANE_YZ (2) "YZ" set YZ plane and return previous value (G19)
The previously active plane is returned if the plane is set. 
The current plane of operation is returned as an integer if mode is undef.
spindle=undef spindle ( scalar:speed )
speed scalar [no units] Spindle speed (see below).
Enable/disable spindle turning and set the spindle speed, where speed should be:
  scalar Description
    <0 spindle counter clockwise (M4)
    0 spindle off (M5)
    >0 spindle clockwise (M3)
The spindle speed is set with an S command to abs(speed) before the spindle is enabled.
spindlespeed=undef spindlespeed ( scalar:speed )
speed scalar [no units] Spindle speed. Speed must be larger or equal zero.
Set the spindle speed (S) to speed.
toolchange=undef toolchange ( scalar:toolnr )
undef toolchange ( scalar:toolnr, scalar:setoffs )
toolnr scalar [no units] Tool number to change to. Toolnr should be integer and must be larger or equal zero.
setoffs scalar [boolean] Set tool offset.
Change tool (T) to toolnr. An M6 code is also emitted to perform the actual tool change. 
If setoffs evaluates to true, then a G43 code is also emitted to set the tools offset.
