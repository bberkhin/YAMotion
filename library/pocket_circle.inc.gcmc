/*
 Milling  Circula pocket function 
 
 Input parameters 
 l_xCenter,l_yCenter - center of the circle
 l_rad - circle radius 
 l_depth - deep of cutting
 l_zSave - save z
 l_zDelta - z step
 l_dMill - mill diameter 
 l_xyRate - feed l_xyRate
 l_zRate - feed l_xyRate by Z
 l_stepover - stepover in percent
 l_ccw- clockwise  0 - clockwise, 2- counter clockwise 
*/



function do_arc( endpt, rrr,l_ccw)
{
if ( l_ccw ) { arc_ccw(endpt,rrr); }
else  { arc_cw(endpt,rrr); }
}



function DoCirculePocket(l_xCenter,l_yCenter,l_rad,l_depth, l_zSave,l_zDelta,l_dMill,l_stepover,l_RampDist, l_xyRate,l_zRate, l_ccw)
{
// test inputs
if( l_dMill <= 0 ) { error("Tool diametr can not be zero or negitive"); }
if( (l_stepover <= 0) || (l_stepover > 100) ) { error("Stepover is wrong"); }
if( l_rad <= (0.51*l_dMill)  ) { error("Tool diametr  is to large or radius is too small"); }
if( l_xyRate <= 0 ) { error("Feed l_xyRate can not be zero or negitive"); }
if( l_zRate <= 0 ) { error("Plunge feed l_xyRate can not be zero or negitive"); }
if( l_zDelta == 0 ) { error("Step can not be zero"); }

comment(" Milling  Circula pocket");
comment("Center point: [",l_xCenter,"," , l_yCenter,",-] Radius: ", l_rad );
comment("Mill dianetr: ",l_dMill, "; Z save: " ,l_zSave, "; Z Full : ", -1*l_depth, "; Z Step: ",  l_zDelta );
comment("Step over:" + l_stepover );

local Stepover = l_dMill * (abs(100-l_stepover)/100.);
local rhole = (l_rad - l_dMill / 2);
local zCur = 0;
local zDepth = -1*l_depth;
local RAD = Stepover;
local RADCIRCLE=0;

goto([-,-,l_zSave]);
while(zDepth < zCur) 
{
 zCur = zCur - l_zDelta;
 if ( zCur < zDepth)
 {
	zCur = zDepth;
 }

 RAD = Stepover;
 
 goto([l_xCenter,l_yCenter,-]);
 move([-,-,zCur ], l_zRate);
  
 
 while ( rhole >= RAD )
 {
	xEnd =  l_xCenter + RAD;
	RADCIRCLE = RAD - Stepover/2;
	feedrate(l_xyRate);
	
//    message( "radius :", RADCIRCLE );
//    message( "from ", position(), "to ", [xEnd,l_yCenter,-]  );
    do_arc( [xEnd,l_yCenter,-], RADCIRCLE, l_ccw );		
	
    xEnd =  l_xCenter - RAD;
    //Clean out the other side of the cut	 
    do_arc( [xEnd,l_yCenter,-],RAD, l_ccw  );
    RAD = RAD + Stepover;
    if( rhole <= RAD)
	 {
        //message( "4 rhole:", rhole,"RAD: ",  RAD);
	    RADCIRCLE = (abs( l_xCenter-xEnd) + rhole )/2; //Need to have a round HERE
		do_arc( [l_xCenter+rhole,l_yCenter,-],RADCIRCLE,l_ccw );
		do_arc( [l_xCenter-rhole,l_yCenter,-],rhole,l_ccw );		
		do_arc( [l_xCenter+rhole,l_yCenter,-],rhole,l_ccw );
        break;
     }             
  } 
   // for small hole
   if ( rhole < Stepover )
   {
		if ( l_ccw )
		{
			arc_ccw( [l_xCenter+rhole,l_yCenter,-],rhole/2 );
			arc_ccw( [l_xCenter-rhole,l_yCenter,-],rhole );
			arc_ccw( [l_xCenter+rhole,l_yCenter,-],rhole );
		}
        else
		{
			arc_cw( [l_xCenter+rhole,l_yCenter,-],rhole/2 );
			arc_cw( [l_xCenter-rhole,l_yCenter,-],rhole );
			arc_cw( [l_xCenter+rhole,l_yCenter,-],rhole );
		}
   }

if ( l_RampDist > 0 )
{
	RD = (rhole > l_RampDist ) ? l_RampDist : rhole/2;
	if ( l_ccw ) { arc_ccw( [l_xCenter+rhole-RD,l_yCenter+RD,-], RD  ); }
	else        { arc_cw( [l_xCenter+rhole-RD,l_yCenter-RD,-], RD  ); }
}
goto([-,-,l_zSave]);
}

}
