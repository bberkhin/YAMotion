/*
 * G-code meta compiler
 *
 * Copyright (C) 2014  B. Stultiens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Cycloids example
 * ----------------
 *
 * Generate patterns as a Spirograph makes them. There are two basic formula,
 * hypotrochoid and epitrochoid.
 *
 *
 * @@@--svg-toolwidth 0.5 --svg-opacity 1@@@
 */

include("tracepath.inc.gcmc");

/*
 * Hypotrochoid - Circle trace inside a circle
 * See: https://en.wikipedia.org/wiki/Hypotrochoid
 *
 * A hypotrochoid becomes a hypocycloid when d == r
 *
 * phi	- Angle of rotation for the point
 * R	- Fixed circle radius
 * r	- Rolling circle radius
 * d	- Tracking point distance from rolling circle center
 */
function hypotrochoid_point(phi, R, r, d)
{
	return (R-r) * [cos(phi), sin(phi)] + d * [cos(phi*((R-r)/r)), -sin(phi*((R-r)/r))];
}

/*
 * Epitrochoid - Circle trace outside a circle
 * See: https://en.wikipedia.org/wiki/Epitrochoid
 *
 * An epitrochoid becomes an epicycloid when d == r
 *
 * phi	- Angle of rotation for the point
 * R	- Fixed circle radius
 * r	- Rolling circle radius
 * d	- Tracking point distance from rolling circle center
 */
function epitrochoid_point(phi, R, r, d)
{
	return (R+r) * [cos(phi), sin(phi)] - d * [cos(phi*((R+r)/r)), sin(phi*((R+r)/r))];
}

/*
 * Create a hypotrochoid path
 *
 * R	- Fixed circle radius
 * r	- Rolling circle radius
 * d	- Tracking point distance from rolling circle center
 * astep- Angular step
 */
function hypotrochoid(R, r, d, astep)
{
	local path = {};
	local a;
	if(!isnone(R) || !isnone(r) || !isnone(d)) {
		warning("Units detected; hypotrochoid() is a parametric function");
	}
	if(!isangle(astep)) {
		error("Angular step must have angular units");
	}
	R = to_float(R);	// Divisions will be off for integer
	r = to_float(r);
	d = to_float(d);
	local max_a = 360.0deg * r;
	for(a = 0.0deg; a < max_a; a += astep) {
		path += { hypotrochoid_point(a, R, r, d) };
	}
	return path;
}

/*
 * Create an epitrochoid path
 *
 * R	- Fixed circle radius
 * r	- Rolling circle radius
 * d	- Tracking point distance from rolling circle center
 * astep- Angular step
 */
function epitrochoid(R, r, d, astep)
{
	local path = {};
	local a;
	if(!isnone(R) || !isnone(r) || !isnone(d)) {
		warning("Units detected; epitrochoid() is a parametric function");
	}
	if(!isangle(astep)) {
		error("Angular step must have angular units");
	}
	R = to_float(R);	// Divisions will be off for integer
	r = to_float(r);
	d = to_float(d);
	local max_a = 360.0deg * r;
	for(a = 0.0deg; a < max_a; a += astep) {
		path += { epitrochoid_point(a, R, r, d) };
	}
	return path;
}

/* -------------------- Main Program -------------------- */

feedrate(2000.0mm);

/*
 * Setup some parametric sets for the trochoids
 */
parms = {
	[ 5,  3, 2],
	[10,  1, 2],
	[ 5,  3, 5],
	[10,  2, 1],
	[17,  5, 3],
	[ 7, 13, 5]
};

/*
 * Trace both hypo- and epi-trochoid for each parameter set
 */
i = -2.5;
foreach(parms; p) {
	maxw = p[0] + p[1] + p[2];	// Estimate parametric size
	// Calculate the paths
	htroch = hypotrochoid(p[0], p[1], p[2], 2.0deg);
	etroch = epitrochoid(p[0], p[1], p[2], 2.0deg);
	// Trace them scaled and offset
	tracepath(htroch * 30.0mm / maxw + [2.1*30.0mm*i, -30.0mm], -1.0mm, -1);
	tracepath(etroch * 30.0mm / maxw + [2.1*30.0mm*i, +30.0mm], -1.0mm, -1);
	i++;
}
