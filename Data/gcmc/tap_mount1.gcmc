
include("tracepath_comp.inc.gcmc");
include("cc_hole.inc.gcmc");
feedrate(200mm);

path = {
	[ 0, 20], [ 0, 120], [ 100,  120],
	[100, 0], [40,  0], [40, 20], 

};

holes = { [ 80, 20], [ 80, 100] };

/*
 * Simple tracer to show the outline
 */
function trace(path, offset)
{
	path = tail(path, -1) + head(path, 1);
	goto(path[-1] + offset);
	foreach(path; v) {
		goto(v + offset);
		//dwell(0);
	}
}

function clone_semmetrical(x, path )
{
    outpath = path;
    n = count( path );
    for( i = 0; i < n; ++i )
    {
        outpath[i][0] = x + (x - path[i][0]);     
    }
    return  reverse( outpath );
}


SAFEZ = 5.0mm;			// Safe Z-level
HOME  = [0.0mm, 0.0mm, SAFEZ];
CUTZ  = -8.0mm;			// Cutting level
TW    = 4.0mm;			// Tool width
TW2   = TW/2.0;			// Half tool-width for compensation
STEPZ = 2.0mm;
OVERTOOL = TW2;

function CutCountour(path)
{
   //trace(path, []);	// Show a rapid path to see the difference
   
    /*
     * Choose your test trace by uncommenting the line(s) you want to see
     */
     goto([-,-,SAFEZ]);
    CURZ = 0;
    do{
      CURZ -= STEPZ;  
      if( CURZ < CUTZ )
         { CURZ = CUTZ; }
      path[0][2] = CURZ;	// Set the cutting depth at the first point
      //tracepath_comp(path, TW2, TPC_LEFT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_CLOSED);
      tracepath_comp(path, TW2, TPC_LEFT|TPC_OLDZ|TPC_CLOSED|TPC_ARCIN|TPC_ARCOUT);
    }while( CURZ > CUTZ );
    goto([-,-,SAFEZ]);
}

     
    // do hole for bearing
function CutHole(path)
{
    goto([-,-,SAFEZ]);
    foreach(holes; v) 
    {
        CURZ = 0;
        do{
          goto([-,-,CURZ+SAFEZ]);
          CURZ -= STEPZ;
          if( CURZ < CUTZ )
             { CURZ = CUTZ; }
          cc_hole(v, 13.0mm, TW2, OVERTOOL , CURZ); 
        }while( CURZ > CUTZ );
    }
    goto([-,-,SAFEZ]);
}


/* -------------------- Main Program -------------------- */

CutHole(holes);
holes = clone_semmetrical( 100mm + TW+TW2, holes );
CutHole(holes);
CutCountour(path);
path = clone_semmetrical( 100mm + TW+TW2, path );
path = tail(path, -2) + head(path, 2);
CutCountour(path);
