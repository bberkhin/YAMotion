/*
 * G-code meta compiler
 *
 * Copyright (C) 2014  B. Stultiens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Tool compensation example
 * -------------------------
 *
 * @@@--svg-toolwidth 4.0 --svg-opacity 0.5@@@
 */

include("tracepath_comp.inc.gcmc");

feedrate(600mm);

path = {
	[ 4,  3], [ 3.5, 3.5], [ 3,  4],	// Entry with co-linear point
	[2.7, 4], [2.5,  3], [2.3, 4],		// inside marginal entry

	[ 2,  4], [ 1,  5],

	[0.2,  5], [0.1,  6], [ 0,  3], [-0.1,  4],	// Sharp both directions
	[-1,  4], [-1.1,  6], [-1.2,  5],	// Outside "horns"
	[-2.0,  5], [ -2.1,  6], [ -2,  4],

	[ -3,  4], [ -4,  3],

	[ -4, 2.5], [ -5, 3], [ -4, 2.5],	// Path reversal angled
	[ -4,  2], [ -3,  2], [ -4,  2],	// Path reversal
	[ -4, 1.5], [ -5, 1], [ -4, 1.5],	// Path reversal angled
	[ -4,  1], [ -3,  0], [ -4,  0],	// Inside angle
	[ -4, -1], [ -5, -1.05], [ -4, -1.1],	// Symmetric outside
	[ -4, -2], [ -5, -3], [ -4, -2.1],	// Symmetric outside angled

	[ -4, -3], [ -3, -4],

	[ -2, -4], [ -1.9, -2], [ -1.8, -3],	// Inside "horns"
	[ -1.0, -3], [ -0.9, -2], [ -1, -4],
	[ -0, -4], [  0, -5], [ 0.1, -2], [ 0.2, -3],	// Sharp both directions

	[  1, -3], [  2, -4],

	[2.3, -4], [2.5, -5], [2.7, -4],	// Outside marginal entry

	[  3, -4], [  4, -3],

	[  4, -2.1], [  3, -2.5], [  4, -2],	// Symmetric inside angled
	[  4, -1.1], [  3, -1.05], [  4, -1],	// Symmetric inside
	[  4,  0], [  5,  0], [  4,  1],	// Outside angle
	[  4,  1.5], [  3,  1], [  4,  1.5],	// Path reversal
	[  4,  2], [  5,  2], [  4,  2],	// Path reversal

	[  4,  2.5],				// Exit point (below entry)
};


/*
 * Simple tracer to show the outline
 */
function trace(path, offset)
{
	path = tail(path, -1) + head(path, 1);
	goto(path[-1] + offset);
	foreach(path; v) {
		goto(v + offset);
		//dwell(0);
	}
}

/* -------------------- Main Program -------------------- */

SAFEZ = 5.0mm;			// Safe Z-level
CUTZ  = -1.0mm;			// Cutting level
HOME  = [0.0mm, 0.0mm, SAFEZ];
TW    = 4.0mm;			// Tool width
TW2   = TW/2.0;			// Half tool-width for compensation

goto(HOME);
move(HOME);		// So LinuxCNC will show the following rapids

path *= 10.0mm;		// Scale to something visibly useful
trace(path, []);	// Show a rapid path to see the difference

path[0][2] = CUTZ;	// Set the cutting depth at the first point

/*
 * Choose your test trace by uncommenting the line(s) you want to see
 */
//tracepath_comp(path, TW2, TPC_LEFT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_CLOSED);
//tracepath_comp(path, TW2, TPC_RIGHT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_CLOSED);
tracepath_comp(path, TW2, TPC_RIGHT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_QUIET);
//tracepath_comp(path, TW2, TPC_LEFT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_QUIET);
//tracepath_comp(path, TW2, TPC_RIGHT|TPC_OLDZ);
//tracepath_comp(path, TW2, TPC_LEFT|TPC_OLDZ);


/*
 * Include the involute gear example function and do a trace
 */

include("involute-gear.inc.gcmc");
include("cc_hole.inc.gcmc");

HD = 6.0mm;	// Gear center-hole diameter
N = 9;		// Number of teeth
PA = 20.0deg;	// Pressure angle
D = 100.0mm;	// Pitch diameter
P = N/D;	// Diametral pitch

cc_hole([120mm, 0mm], 5.0mm, TW2, TW2/2.0, CUTZ);
gearpath = gear_P(N, PA, P) + [120mm, 0mm];
trace(gearpath, []);	// Show the original path as a rapid
gearpath[0][2] = CUTZ;	// Set cutting depth
tracepath_comp(gearpath, TW2, TPC_RIGHT|TPC_OLDZ|TPC_ARCIN|TPC_ARCOUT|TPC_CLOSED);

goto(HOME);
