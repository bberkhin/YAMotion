/*
 * Box design for the Executive Decision Maker Pro
 *
 * (c) 2013 B. Stultiens
 * License: CC-BY-SA-3.0
 *
 * See: http://www.vagrearg.org/content/edm-pro
 *
 * Run this script with:
 *   $ gcmc --svg --svg-toolwidth=.1 --svg-opacity=1 -o edm-pro-box.svg edm-pro-box.gcmc
 * and you can view the generated SVG file "sdm-pro-box.svg" in an SVG viewer
 * or in f.x. Inkscape.
 * You can also generate DXF or G-code output from gcmc and use it on your
 * favorite tool. See gcmc documentation for more details.
 *
 * Cmd-line option marker for example generation script:
 * @@@--svg-toolwidth=.1 --svg-opacity=1@@@
 */

wall = 3.0mm;			/* Plexiglas thickness */
case_w = 104mm + 2*wall;	/* Case size */
case_l = 150mm + 2*wall;
case_h = 20mm;			/* Front height */
angle = 10deg;			/* Top angled by this */

pcbhole_w = 3545mil;		/* Mounting hole spacing on PCB */
pcbhole_l = 5515mil;
pcbhole_rad = 1.55mm;		/* PCB mounting hole radius */
pcbsw_rad = 4.75mm;		/* Switch hole radius */
pcbsw_ofs_w = 985mil;		/* Offset for switch hole from top mounting holes */
pcbsw_ofs_l = 515mil;

screwhole_rad = 1.55mm;		/* Screw mount through the plate */
screw_retract = wall/2.0;	/* Hole's center from the edge */
foothole_rad = 2.125mm;		/* Rubber foot mounting hole */
foot_retract = 20.0mm;		/* Rubber foot movement from the edges */

/* Special path to cut a nut-spacing and screw mount into the plate */
screwcut = {
	[-1.50mm, 0.0mm],
	[-1.50mm, 4.0mm],
	[-2.75mm, 4.0mm],
	[-2.75mm, 6.5mm],
	[-1.50mm, 6.5mm],
	[-1.50mm, 8.5mm],
	[ 1.50mm, 8.5mm],
	[ 1.50mm, 6.5mm],
	[ 2.75mm, 6.5mm],
	[ 2.75mm, 4.0mm],
	[ 1.50mm, 4.0mm],
	[ 1.50mm, 0.0mm]
};

/* Make a hole at 'center' of size 'radius' */
function hole(center, radius)
{
	goto(center - [radius, -]);	/* Move to the left of the hole */
	circle_cw_r(radius, 0deg);	/* Cut clockwise */
}

function trace(vl)
{
	local v0, v;
	v0 = vl[0];
	vl <<= 1;
	goto(v0);
	move(vl);
	if(issvg()) {
		svg_closepath();
	} else {
		move(v0);
	}
}

/* Bottom of the case */
function bottomplate(offset)
{
	local bp, bp_s, corners;

	bp = {
		[0mm, 0mm],
		[case_w, 0mm],
		[case_w, case_l],
		[0mm, case_l]
	};
	bp_s = {
		[screw_retract, case_l/2.0],
		[case_w/2.0, screw_retract],
		[case_w-screw_retract, case_l/2.0],
		[case_w/2.0, case_l-screw_retract]
	};

	/* Corner retraction vectors for holes at corners */
	corners = { [1, 1], [-1, 1], [-1, -1], [1, -1] };

	for(i = 0; i < count(bp); i++) {
		hole(bp_s[i] + offset, screwhole_rad);
		hole(bp[i] + corners[i] * foot_retract + offset, foothole_rad);
	}
	trace(bp + offset);
}

/* Front */
function frontplate(offset)
{
	local tp;

	tp = {
		[0mm, 0mm],
		[case_w/2.0 + screwcut[0][0], 0mm]
	} + (screwcut + [case_w/2.0, 0mm]) + {
		[case_w/2.0, 0mm] + screwcut[-1],
		[case_w, 0mm],
		[case_w, case_h-wall*sin(angle)],
		[0mm, case_h-wall*sin(angle)]
	};

	hole([case_w-screw_retract, case_h/2.0] + offset, screwhole_rad);
	hole([0mm+screw_retract, case_h/2.0] + offset, screwhole_rad);

	trace(tp + offset);
}

/* Hole for DC power plug */
function powerhole(offset)
{
	goto(  [-5.9mm, -2.48mm] + offset);
	move(  [-5.9mm,  2.48mm] + offset);
	arc_cw([ 5.9mm,  2.48mm] + offset, 6.4mm);
	move(  [ 5.9mm, -2.48mm] + offset);
	arc_cw([-5.9mm, -2.48mm] + offset, 6.4mm);
}

/* Backside with power plug hole */
function backplate(offset)
{
	local tp, h;

	h = case_h + (case_l-2*wall) * tan(angle);
	tp = {
		[0mm, 0mm],
		[case_w/2.0, 0mm] + screwcut[0]
	} + (screwcut + [case_w/2.0, 0mm]) + {
		[case_w, 0mm],
		[case_w, h],
		[0mm, h]
	};

	hole([case_w-screw_retract, h/2.0] + offset, screwhole_rad);
	powerhole([0.75*case_w, 0.4*h] + offset);
	hole([0mm+screw_retract, h/2.0] + offset, screwhole_rad);

	trace(tp + offset);
}

/* Angled sides path generation */
function sideplate_path()
{
	local s, sp, h, shr, shl, sht, l, tl, tv;
	l = case_l - 2.0*wall;
	h = case_h + l * tan(angle);
	tl = l / cos(angle);
	tv = [-cos(angle), -sin(angle)];
	shr = rotate_xy(screwcut, 90deg);
	shl = rotate_xy(screwcut, -90deg);
	sht = rotate_xy(screwcut, 180deg + angle);
	return {
		[0mm, 0mm],
		[l/2.0, 0mm] + screwcut[0]
		} + (screwcut + [l/2.0, 0mm]) + {
		[l, 0mm],
		[l, h/2] + shr[0]
		} + (shr + [l, h/2]) + {
		[l, h],
		tv*tl*0.25 + [l, h] + sht[0]
		} + (sht + tv*tl*0.25 + [l, h]) + {
		tv*tl*0.75 + [l, h] + sht[0]
		} + (sht + tv*tl*0.75 + [l, h]) + {
		[0mm, case_h],
		[0mm, case_h/2] + shl[0]
		} + (shl + [0mm, case_h/2]) + {
	};
}

/* Left/right side plates */
function sideplate(offset, m)
{
	local sp;

	if(m) {
		sp = scale(rotate_xy(sideplate_path(), 90deg-angle), [-1, 1]);
	} else {
		sp = rotate_xy(sideplate_path(), -90deg);
	}

	trace(sp + offset);
}

/* Top of the box with switch and PCB mounting holes */
function topplate(offset)
{
	local tp, l, l2, pbw, pbl;

	l = case_l / cos(angle);
	l2 = (case_l - 2*wall) / cos(angle);

	tp = {
		[0mm, 0mm],
		[case_w, 0mm],
		[case_w, l],
		[0mm, l]
	};

	pbw = (case_w - pcbhole_w)/2.0;
	pbl = (case_l - pcbhole_l)/2.0;
	hole([         pbw,          pbl] + offset, pcbhole_rad);
	hole([case_w - pbw,          pbl] + offset, pcbhole_rad);
	hole([case_w - screw_retract, l2*0.25+wall] + offset, screwhole_rad);
	hole([case_w - screw_retract, l2*0.75+wall] + offset, screwhole_rad);
	hole([case_w - pbw, case_l - pbl] + offset, pcbhole_rad);
	hole([         pbw, case_l - pbl] + offset, pcbhole_rad);
	hole([screw_retract, l2*0.75+wall] + offset, screwhole_rad);
	hole([screw_retract, l2*0.25+wall] + offset, screwhole_rad);
	hole([pbw, pbl] + [pcbsw_ofs_w, pcbsw_ofs_l] + offset, pcbsw_rad);
	hole([case_w - pbw, pbl] + [-pcbsw_ofs_w, pcbsw_ofs_l] + offset, pcbsw_rad);

	trace(tp + offset);
}

/******************** Main program ********************/
feedrate(500);	/* Only here to test as g-code in LinuxCNC */

bottomplate([0,0]);
sideplate([113,150], 0);
sideplate([164,0], 1);
topplate([187, 0]);
frontplate([113,162]);
backplate([0,159]);
