#line 1 "grammarl.flex.cpp"

#line 3 "grammarl.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[179] =
    {   0,
       84,   84,    0,    0,    0,    0,   88,   86,   84,   85,
       83,    8,   83,   83,   83,   83,   83,   83,   83,   83,
       29,   29,   79,   83,   80,   54,   83,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   81,   83,   82,
        2,    4,    6,   26,   28,   10,   86,   84,   62,   71,
       60,   75,   69,   56,   65,   55,   58,   67,   57,   32,
        1,    7,   70,   32,   29,   33,   31,   77,   63,   61,
       64,   78,   54,   76,   54,   54,   54,   37,   54,   54,
       54,   44,   45,   54,   54,   49,   54,   54,   54,   74,
       59,    2,    3,    3,    5,   26,    9,   24,   15,   24,

       23,   11,   14,   16,   17,   18,   19,   20,   21,   22,
       24,   66,   68,    7,   32,   33,   32,   31,   30,   72,
       73,   54,   54,   38,   54,   54,   42,   54,   54,   54,
       48,   50,   54,   54,   54,   27,   15,   25,   11,   14,
       13,   54,   54,   54,   39,   40,   54,   54,   54,   54,
       54,   54,   54,   11,   12,   34,   36,   54,   54,   54,
       54,   47,   54,   54,   53,   54,   54,   54,   54,   51,
       52,   54,   41,   54,   46,   35,   43,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    8,    1,    9,
        9,   10,   11,    9,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,    9,    9,   18,
       19,   20,    9,    1,   21,   21,   21,   21,   22,   21,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
        9,   24,    9,   25,   23,    1,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   23,   35,   36,   37,   38,
       39,   40,   23,   41,   42,   43,   44,   45,   46,   47,
       23,   23,   48,   49,   50,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[51] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        1,    1,    1,    1,    5,    5,    5,    1,    1,    1,
        5,    5,    6,    3,    1,    5,    5,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1
    } ;

static const flex_int16_t yy_base[191] =
    {   0,
        0,    0,   48,   49,   50,   51,  313,  314,   58,  314,
      293,  314,  292,   47,  314,  291,   50,   51,   56,   66,
       66,   76,   46,  290,   48,    0,  289,  266,  267,   47,
      269,   51,   56,  265,   67,   77,  270,  314,   59,  314,
        0,  314,   95,    0,  314,  108,  111,  114,  314,  314,
      314,  314,  314,  314,  314,  283,  314,  314,  282,  114,
      314,    0,  314,  117,  144,  108,  160,  281,  314,  314,
      314,  280,    0,  314,  268,  259,  264,    0,  101,  254,
      256,    0,  265,  264,  255,    0,  261,  105,  255,  314,
      314,    0,  314,  136,  314,    0,  149,  314,  160,  285,

      314,  152,  155,  314,  314,  314,  314,  314,  314,  314,
        0,  314,  314,    0,  163,  179,  182,  185,    0,  314,
      314,  261,   79,    0,  255,  255,  254,  255,  246,  255,
        0,    0,  250,  235,  242,  314,  161,  314,  188,  193,
        0,  242,  233,  241,    0,    0,  248,  230,  228,  235,
      244,  224,  229,  202,  314,    0,    0,  210,  219,  207,
      208,    0,  192,  154,    0,  140,  150,  134,  111,    0,
        0,  110,    0,   73,    0,    0,    0,  314,  219,  225,
      227,  233,  239,  245,  251,  257,  263,   97,   92,   79
    } ;

static const flex_int16_t yy_def[191] =
    {   0,
      178,    1,  179,  179,  180,  180,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  181,  178,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  178,  178,  178,
      182,  178,  183,  184,  178,  178,  185,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  186,  178,  178,  178,  178,  187,  178,  178,  178,
      178,  178,  181,  178,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  178,
      178,  182,  178,  183,  178,  184,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      188,  178,  178,  186,  178,  178,  178,  187,  189,  178,
      178,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  178,  178,  178,  178,  178,
      190,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  178,  178,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,    0,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178
    } ;

static const flex_int16_t yy_nxt[365] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,   23,   24,   25,
       26,   26,   26,    8,   27,   26,   28,   29,   30,   31,
       32,   26,   26,   33,   26,   34,   35,   26,   26,   26,
       36,   26,   26,   26,   26,   37,   26,   38,   39,   40,
       42,   42,   45,   45,   51,   46,   46,   43,   43,   48,
       54,   48,   57,   68,   69,   52,   71,   72,   55,   58,
       60,   60,   60,   47,   47,   61,   77,   90,   64,   62,
       65,   65,   65,  155,   63,   78,   82,   66,   64,   80,
       65,   65,   65,   83,   81,   66,  119,   66,   56,   59,

       85,  141,   87,   86,   94,   66,   88,   91,   95,   97,
      177,   97,   67,   99,  100,   48,  101,   48,  116,  116,
      143,  144,  117,  117,  117,  102,  102,  103,   60,   60,
       60,  115,  115,  115,  125,   66,  104,  105,   66,  176,
      175,  106,  126,   66,  133,   94,   66,  134,  107,   95,
       97,  108,   97,  109,  136,  110,   64,  111,   65,   65,
       65,  137,  137,  137,  137,   66,  139,  139,  140,  140,
      140,  140,  174,   66,  119,  119,  119,  115,  115,  115,
      119,  119,  173,  172,   66,  119,  119,  119,  119,  119,
      119,  171,   66,  117,  117,  117,  117,  117,  117,  178,

      178,  178,  154,  154,  140,  178,  178,  140,  140,  140,
      178,  178,  178,  178,  178,  178,  140,  140,  140,   41,
       41,   41,   41,   41,   41,   44,   44,   44,   44,   44,
       44,   73,   73,   92,  170,   92,  169,   92,   92,   93,
      168,   93,   93,   93,   93,   96,  167,  166,   96,   96,
       96,   98,   98,   98,   98,   98,   98,  114,  165,  114,
      114,  114,  114,  118,  164,  118,  118,  118,  118,  163,
      162,  161,  160,  159,  158,  157,  156,  153,  152,  151,
      150,  149,  148,  147,  146,  145,  142,  138,  135,  132,
      131,  130,  129,  128,  127,  124,  123,  122,  121,  120,

      113,  112,   89,   84,   79,   76,   75,   74,   70,   53,
       50,   49,  178,    7,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178
    } ;

static const flex_int16_t yy_chk[365] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    5,    6,   14,    5,    6,    3,    4,    9,
       17,    9,   18,   23,   23,   14,   25,   25,   17,   18,
       19,   19,   19,    5,    6,   20,   30,   39,   21,   20,
       21,   21,   21,  190,   20,   30,   33,   21,   22,   32,
       22,   22,   22,   33,   32,   21,  189,   22,   17,   18,

       35,  188,   36,   35,   43,   22,   36,   39,   43,   46,
      174,   46,   21,   47,   47,   48,   47,   48,   66,   66,
      123,  123,   66,   66,   66,   47,   47,   47,   60,   60,
       60,   64,   64,   64,   79,   60,   47,   47,   64,  172,
      169,   47,   79,   60,   88,   94,   64,   88,   47,   94,
       97,   47,   97,   47,   97,   47,   65,   47,   65,   65,
       65,   99,  137,   99,  137,   65,  102,  102,  102,  103,
      103,  103,  168,   65,   67,   67,   67,  115,  115,  115,
       67,   67,  167,  166,  115,   67,   67,   67,   67,   67,
       67,  164,  115,  116,  116,  116,  117,  117,  117,  118,

      118,  118,  139,  139,  139,  118,  118,  140,  140,  140,
      118,  118,  118,  118,  118,  118,  154,  154,  154,  179,
      179,  179,  179,  179,  179,  180,  180,  180,  180,  180,
      180,  181,  181,  182,  163,  182,  161,  182,  182,  183,
      160,  183,  183,  183,  183,  184,  159,  158,  184,  184,
      184,  185,  185,  185,  185,  185,  185,  186,  153,  186,
      186,  186,  186,  187,  152,  187,  187,  187,  187,  151,
      150,  149,  148,  147,  144,  143,  142,  135,  134,  133,
      130,  129,  128,  127,  126,  125,  122,  100,   89,   87,
       85,   84,   83,   81,   80,   77,   76,   75,   72,   68,

       59,   56,   37,   34,   31,   29,   28,   27,   24,   16,
       13,   11,    7,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "grammarl.l"
/*
 * G-code meta compiler
 *
 * Copyright (C) 2013  B. Stultiens
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#define YY_NO_INPUT 1
/* Exclusive comment eating */

/* Exclusive string collection */

#line 29 "grammarl.l"
#include "config.h"

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#else
#define YY_NO_UNISTD_H
#endif
#define YYDEBUG 1
#include <ctype.h>
#include <assert.h>

#include "grammartypes.h"
#include "grammary.h"
#include "utils.h"
 
/* This is here to cast the result to ssize_t so that the "< 0" comparison works */
/* The rest is a copy of the generated scanner code */
#define YY_INPUT(buf,result,max_size) \
	errno = 0; \
	while((int)(result = read( fileno(yyin), (char *) buf, max_size )) < 0) { \
		if(errno != EINTR) { \
			YY_FATAL_ERROR("input in flex scanner failed"); \
			break; \
		} \
		errno = 0; \
		clearerr(yyin); \
	}

int linenr = 1;
int charnr = 1;
int prevlinenr = 1;
int prevcharnr = 1;
const char *filename;

typedef struct __incstack_t {
	YY_BUFFER_STATE	bufferstate;	/* Previous flex context */
	FILE		*fp;		/* Previous input file */
	int		linenr;		/* Position of the include() statement */
	int		charnr;
	int		prevlinenr;
	int		prevcharnr;
	const char	*filename;	/* Name of file we were handling */
} incstack_t;

static incstack_t	*incstack;
static int		nincstack;
static int		naincstack;

static void str_init(void);
static void str_addc(char c);
static wchar_t *str_get(void);
static wchar_t *utf8_to_ucs32(const char *s, int len);

/* Always update the current character position within a line */
#define YY_USER_ACTION	do { prevlinenr = linenr; prevcharnr = charnr; charnr += yyleng; } while(0);

#pragma warning(disable:4996)

#line 664 "grammarl.flex.cpp"
/* Some shortcut definitions */
#line 666 "grammarl.flex.cpp"

#define INITIAL 0
#define comment 1
#define string 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 95 "grammarl.l"


#line 891 "grammarl.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 179 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 178 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 97 "grammarl.l"
yy_push_state(comment); /* Skip block comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 98 "grammarl.l"
; /* Skip junk */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "grammarl.l"
; /* Skip * */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 100 "grammarl.l"
linenr++; charnr = 1;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "grammarl.l"
yy_pop_state();
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "grammarl.l"
; /* Skip * */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "grammarl.l"
; /* Skip line comments */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 106 "grammarl.l"
yy_push_state(string); str_init();
	YY_BREAK
case 9:
#line 108 "grammarl.l"
case 10:
YY_RULE_SETUP
#line 108 "grammarl.l"
{
				yy_pop_state();
				yylval.str = str_get();
				return STRING;
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 113 "grammarl.l"
{ /* octal escape sequence */
				int result;
				result = strtol(yytext+1, 0, 8);
				if(result > 0xff)
					yyerror("Character constant out of range");
				if(!result)
					yyerror("Embedded '\\0' character not allowed");
				str_addc((char)result);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 122 "grammarl.l"
{ /* hex escape sequence */
				int result;
				result = strtol(yytext+2, 0, 16);
				if(!result)
					yyerror("Embedded '\\0' character not allowed");
				str_addc((char)result);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 129 "grammarl.l"
{  yyerror("Invalid hex escape sequence '%s'", yytext); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "grammarl.l"
yyerror("Bad escape sequence");
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 132 "grammarl.l"
linenr++; charnr = 1; /* backslash at EOL continues string after leading whitespace on next line */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "grammarl.l"
str_addc('\a');
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "grammarl.l"
str_addc('\b');
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 135 "grammarl.l"
str_addc('\f');
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 136 "grammarl.l"
str_addc('\n');
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "grammarl.l"
str_addc('\r');
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 138 "grammarl.l"
str_addc('\t');
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "grammarl.l"
str_addc('\v');
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "grammarl.l"
str_addc('"');
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "grammarl.l"
str_addc(yytext[1]);
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 142 "grammarl.l"
str_addc(yytext[2]); linenr++; charnr = 1;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "grammarl.l"
{
				char *yptr = yytext;
				while(*yptr)
					str_addc(*yptr++);
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 148 "grammarl.l"
;		/* "bla" "bla" -> "blabla" */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 149 "grammarl.l"
yyerror("Unterminated string");
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "grammarl.l"
{
			yylval.i = strtol(yytext, NULL, 10);
			return NUMBER;
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 155 "grammarl.l"
{
			yylval.i = strtol(yytext, NULL, 16);
			return NUMBER;
		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 159 "grammarl.l"
yyerror("Bad hexadecimal number '%s'", yytext);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 161 "grammarl.l"
{
			yylval.d = strtod(yytext, NULL);
			return FLOAT;
		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 165 "grammarl.l"
{
			yyerror("Bad floating point number '%s', missing exponent magnitude", yytext);
		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 169 "grammarl.l"
return BREAK;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 170 "grammarl.l"
return CONTINUE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 171 "grammarl.l"
return CONST;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 172 "grammarl.l"
return DO;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 173 "grammarl.l"
return DEG;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 174 "grammarl.l"
return ELIF;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 175 "grammarl.l"
return ELSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 176 "grammarl.l"
return FOREACH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 177 "grammarl.l"
return FOR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 178 "grammarl.l"
return FUNCTION;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 179 "grammarl.l"
return IF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 180 "grammarl.l"
return IN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 181 "grammarl.l"
return INCLUDE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 182 "grammarl.l"
return LOCAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 183 "grammarl.l"
return MIL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 184 "grammarl.l"
return MM;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 185 "grammarl.l"
return RAD;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 186 "grammarl.l"
return REPEAT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 187 "grammarl.l"
return RETURN;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 188 "grammarl.l"
return WHILE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "grammarl.l"
{
			yylval.str = utf8_to_ucs32(yytext, yyleng);
			return IDENT;
		}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 195 "grammarl.l"
return ADDOR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 196 "grammarl.l"
return INC;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 197 "grammarl.l"
return SUBOR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 198 "grammarl.l"
return DEC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 199 "grammarl.l"
return LOR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 200 "grammarl.l"
return LAND;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 201 "grammarl.l"
return EQ;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 202 "grammarl.l"
return NE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 203 "grammarl.l"
return LE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 204 "grammarl.l"
return GE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 205 "grammarl.l"
return ADDASSIGN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 206 "grammarl.l"
return ADDORASSIGN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 207 "grammarl.l"
return SUBASSIGN;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 208 "grammarl.l"
return SUBORASSIGN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 209 "grammarl.l"
return MULASSIGN;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 210 "grammarl.l"
return DIVASSIGN;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 211 "grammarl.l"
return MODASSIGN;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 212 "grammarl.l"
return SHLASSIGN;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 213 "grammarl.l"
return SHRASSIGN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 214 "grammarl.l"
return BORASSIGN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 215 "grammarl.l"
return BANDASSIGN;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 216 "grammarl.l"
return BXORASSIGN;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 217 "grammarl.l"
return SHL;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 218 "grammarl.l"
return SHR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 219 "grammarl.l"
return LT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 220 "grammarl.l"
return GT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 221 "grammarl.l"
return TOPEN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 222 "grammarl.l"
return TCLOSE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 224 "grammarl.l"
return *yytext;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 226 "grammarl.l"
; /* Skip whitespace */
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "grammarl.l"
linenr++; charnr = 1;
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "grammarl.l"
{
				/* Catch all rule to find any unmatched text */
				if(*yytext == '\n') {
					linenr++;
					charnr = 1;
				}
				yyerror("Illegal character in text '%c' (0x%02x)", isprint((unsigned char)*yytext) ? *yytext : '.', *yytext);
				/*yyfatal("internal: Unmatched text '%c' (0x%02x) YY_START=%d", isprint((unsigned char)*yytext) ? *yytext : '.', *yytext, YY_START);*/
			}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string):
#line 238 "grammarl.l"
{
				/* Pop the include stack */
				YY_BUFFER_STATE bs = YY_CURRENT_BUFFER;

				if(YY_START != INITIAL)
					yyfatal("Unexpected EOF");

				if(nincstack) {
					/* Freeing the filename invalidates the node_t structure reference! */
					/*free((void *)filename);*/
					nincstack--;
					if(yyin)
						fclose(yyin);
					yy_switch_to_buffer(incstack[nincstack].bufferstate);
					linenr = incstack[nincstack].linenr;
					charnr = incstack[nincstack].charnr;
					prevlinenr = incstack[nincstack].prevlinenr;
					prevcharnr = incstack[nincstack].prevcharnr;
					filename = incstack[nincstack].filename;
					yy_delete_buffer(bs);
				} else {
					fclose(yyin);
					yylex_destroy();
					yyterminate();
				}
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 264 "grammarl.l"
ECHO;
	YY_BREAK
#line 1457 "grammarl.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 179 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 179 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 178);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 264 "grammarl.l"


static char *str;
static int nstr;
static int nastr;

static void str_init(void)
{
	if(!str) {
		nastr = 32;
		str = (char *)calloc(nastr, sizeof(*str));
	}
	nstr = 0;
}

static void str_addc(char c)
{
	if(nstr >= nastr) {
		str = (char *)realloc(str, 2*nastr*sizeof(*str));
		assert(str != NULL);
		nastr *= 2;
	}
	str[nstr] = c;
	nstr++;
}

static wchar_t *str_get(void)
{
	wchar_t *s;
	assert(str != NULL);
	s = utf8_to_ucs32(str, nstr);
	nstr = 0;
	return s;
}

/*
 * UTF-8 to UCS-32 conversion
 *
 * It includes 1, 2, 3, 4, 5 and 6 byte sequences. The 5 and 6 byte sequences
 * are deprecated by RFC 3629, but they are possible encodings for specials if
 * we ever wanted to (we are not doing the internet here).
 */
static wchar_t *utf8_to_ucs32(const char *s, int len)
{
	int ns = len;
	int nucs = 0;
	int naucs = 0;
	wchar_t *ucs = NULL;

	assert(s != NULL);

	while(len > 0) {
		unsigned int val = 0;

		if((*s & 0xff) <= 0x7f) {
			/* 1-byte sequence */
			val = *s & 0x7f;
			len--;
			s++;
		} else if((*s & 0xfe) == 0xfc) {
			/* 6-byte sequence */
			if(len < 6) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, missing bytes", ns-len, nucs);
				goto errout;
			}
			if((s[1] & 0xc0) != 0x80) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, invalid second byte", ns-len, nucs);
				goto errout;
			}
			if((s[2] & 0xc0) != 0x80) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, invalid third byte", ns-len, nucs);
				goto errout;
			}
			if((s[3] & 0xc0) != 0x80) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, invalid fourth byte", ns-len, nucs);
				goto errout;
			}
			if((s[4] & 0xc0) != 0x80) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, invalid fifth byte", ns-len, nucs);
				goto errout;
			}
			if((s[5] & 0xc0) != 0x80) {
				yyerror("Invalid 6-byte UTF-8 sequence at %d/%d, invalid sixth byte", ns-len, nucs);
				goto errout;
			}
			val = ((s[0] & 0x01) << 30) | ((s[1] & 0x3f) << 24) | ((s[2] & 0x3f) << 18) | ((s[3] & 0x3f) << 12) | ((s[4] & 0x3f) << 6) | (s[5] & 0x3f);
			if(val < 0x4000000)
				rtwarning(NULL, "Degenerate 6-byte UTF-8 encoding at %d/%d", ns-len, nucs);
			len -= 6;
			s += 6;
		} else if((*s & 0xfc) == 0xf8) {
			/* 5-byte sequence */
			if(len < 5) {
				yyerror("Invalid 5-byte UTF-8 sequence at %d/%d, missing bytes", ns-len, nucs);
				goto errout;
			}
			if((s[1] & 0xc0) != 0x80) {
				yyerror("Invalid 5-byte UTF-8 sequence at %d/%d, invalid second byte", ns-len, nucs);
				goto errout;
			}
			if((s[2] & 0xc0) != 0x80) {
				yyerror("Invalid 5-byte UTF-8 sequence at %d/%d, invalid third byte", ns-len, nucs);
				goto errout;
			}
			if((s[3] & 0xc0) != 0x80) {
				yyerror("Invalid 5-byte UTF-8 sequence at %d/%d, invalid fourth byte", ns-len, nucs);
				goto errout;
			}
			if((s[4] & 0xc0) != 0x80) {
				yyerror("Invalid 5-byte UTF-8 sequence at %d/%d, invalid fifth byte", ns-len, nucs);
				goto errout;
			}
			val = ((s[0] & 0x03) << 24) | ((s[1] & 0x3f) << 18) | ((s[2] & 0x3f) << 12) | ((s[3] & 0x3f) << 6) | (s[4] & 0x3f);
			if(val < 0x200000)
				rtwarning(NULL, "Degenerate 5-byte UTF-8 encoding at %d/%d", ns-len, nucs);
			len -= 5;
			s += 5;
		} else if((*s & 0xf8) == 0xf0) {
			/* 4-byte sequence */
			if(len < 4) {
				yyerror("Invalid 4-byte UTF-8 sequence at %d/%d, missing bytes", ns-len, nucs);
				goto errout;
			}
			if((s[1] & 0xc0) != 0x80) {
				yyerror("Invalid 4-byte UTF-8 sequence at %d/%d, invalid second byte", ns-len, nucs);
				goto errout;
			}
			if((s[2] & 0xc0) != 0x80) {
				yyerror("Invalid 4-byte UTF-8 sequence at %d/%d, invalid third byte", ns-len, nucs);
				goto errout;
			}
			if((s[3] & 0xc0) != 0x80) {
				yyerror("Invalid 4-byte UTF-8 sequence at %d/%d, invalid fourth byte", ns-len, nucs);
				goto errout;
			}
			val = ((s[0] & 0x07) << 18) | ((s[1] & 0x3f) << 12) | ((s[2] & 0x3f) << 6) | (s[3] & 0x3f);
			if(val < 0x10000)
				rtwarning(NULL, "Degenerate 4-byte UTF-8 encoding at %d/%d", ns-len, nucs);
			len -= 4;
			s += 4;
		} else if((*s & 0xf0) == 0xe0) {
			/* 3-byte sequence */
			if(len < 3) {
				yyerror("Invalid 3-byte UTF-8 sequence at %d/%d, missing bytes", ns-len, nucs);
				goto errout;
			}
			if((s[1] & 0xc0) != 0x80) {
				yyerror("Invalid 3-byte UTF-8 sequence at %d/%d, invalid second byte", ns-len, nucs);
				goto errout;
			}
			if((s[2] & 0xc0) != 0x80) {
				yyerror("Invalid 3-byte UTF-8 sequence at %d/%d, invalid third byte", ns-len, nucs);
				goto errout;
			}
			val = ((s[0] & 0x0f) << 12) | ((s[1] & 0x3f) << 6) | (s[2] & 0x3f);
			if(val < 0x800)
				rtwarning(NULL, "Degenerate 3-byte UTF-8 encoding at %d/%d", ns-len, nucs);
			len -= 3;
			s += 3;
		} else if((*s & 0xe0) == 0xc0) {
			/* 2-byte sequence */
			if(len < 2) {
				yyerror("Invalid 2-byte UTF-8 sequence at %d/%d, missing bytes", ns-len, nucs);
				goto errout;
			}
			if((s[1] & 0xc0) != 0x80) {
				yyerror("Invalid 2-byte UTF-8 sequence at %d/%d, invalid second byte", ns-len, nucs);
				goto errout;
			}
			val = ((s[0] & 0x1f) << 6) | (s[1] & 0x3f);
			if(val < 0x80)
				rtwarning(NULL, "Degenerate 2-byte UTF-8 encoding at %d/%d", ns-len, nucs);
			len -= 2;
			s += 2;
		} else {
			yyerror("Invalid UTF-8 character at %d/%d, out-of-sequence byte", ns-len, nucs);
			goto errout;
		}

		if(val) {
			if(sizeof(wchar_t) < sizeof(val) && val > 0xffff) {
				rtwarning(NULL, "wchar_t too small to hold character U+%08x, replacing with '?'", val);
				val = L'?';
			}
			testalloc((void **)&ucs, nucs, &naucs, sizeof(ucs[0]));
			ucs[nucs++] = (wchar_t)val;
		} else
			rtwarning(NULL, "Skipping embedded UTF-8 NUL embedding %d/%d", ns-len, nucs);
	}

errout:
	testalloc((void **)&ucs, nucs, &naucs, sizeof(ucs[0]));
	ucs[nucs] = 0;	/* Implicit zero terminate */

	return ucs;
}

void define_setup(char *buf, int bufsize, const char *name)
{
	if(!buf || !bufsize)
		return;

	testalloc((void **)&incstack, nincstack, &naincstack, sizeof(incstack[0]));
	/* Push the current state onto the include stack */
	/* We have to create the initial buffer because it does not exist yet. */
	if(!(incstack[nincstack].bufferstate = YY_CURRENT_BUFFER))
		incstack[nincstack].bufferstate = yy_create_buffer(yyin, YY_BUF_SIZE);
	incstack[nincstack].fp = yyin;
	incstack[nincstack].linenr = linenr;
	incstack[nincstack].charnr = charnr;
	incstack[nincstack].prevlinenr = prevlinenr;
	incstack[nincstack].prevcharnr = prevcharnr;
	incstack[nincstack].filename = filename;
	nincstack++;

	yyin = NULL;
	linenr = 0;
	charnr = 0;
	prevlinenr = 0;
	prevcharnr = 0;
	filename = _strdup(name);
	yy_scan_bytes(buf, bufsize);
}

void handle_include(const wchar_t *wfname)
{
	int i;
	char *fname = _strdup(ucs32_to_utf8(wfname, -1));

	testalloc((void **)&incstack, nincstack, &naincstack, sizeof(incstack[0]));
	/* Push the current state onto the include stack */
	incstack[nincstack].bufferstate = YY_CURRENT_BUFFER;
	incstack[nincstack].fp = yyin;
	incstack[nincstack].linenr = linenr;
	incstack[nincstack].charnr = charnr;
	incstack[nincstack].prevlinenr = prevlinenr;
	incstack[nincstack].prevcharnr = prevcharnr;
	incstack[nincstack].filename = filename;
	nincstack++;

	if(0 != access(fname, 0)) {
		for(i = 0; 1; i++) {
			char *p;
			const char *ip = includepath_get(i);
			if(!ip) {
				yyerror("Include file '%s' cannot be found", fname);
				nincstack--;
				free(fname);
				return;
			}
			p = (char *)malloc(strlen(ip) + strlen(fname) + 2);
			assert(p != NULL);
			strcpy(p, ip);
			strcat(p, "/");
			strcat(p, fname);
			if(0 == access(p, 0)) {
				filename = p;
				break;
			}
			free(p);
		}
	} else {
		filename = strdup(fname);
	}

	free(fname);

	yyin = fopen(filename, "r");
	if(!yyin) {
		yyerror("Include file '%s' cannot be opened", filename);
		nincstack--;
		return;
	}

	linenr = 1;
	charnr = 1;
	prevlinenr = 1;
	prevcharnr = 1;
	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}

void lexer_cleanup(void)
{
	if(str)
		free(str);
	if(incstack)
		free(incstack);
	incstack = 0;
	nincstack = naincstack = 0;
}

